<Overview>
  <Assemblies>
    <Assembly Name="OxyPlot" Version="2014.1.299.1">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 4b be 4f da 84 da d2 96 9d 95 4a 4f 19 de dc 5f ea f1 e3 55 95 80 76 bc 70 e6 bb 16 f8 3a 2c de 16 07 58 52 ff ce b7 e0 b1 4b ad 87 3f d5 65 f9 d1 dc 64 9d 3a 5b cf 62 d0 09 61 02 19 a3 d7 df 2e bd d4 7b 60 da 8f 23 fa f3 a3 92 c1 7b cb 61 93 70 74 c7 e1 df 64 da 4f 3f 41 c0 57 bb 4e d0 da 30 83 5a 4e df 2b 7f 10 9d b8 4a 5e c7 04 4c 4c 52 6e c7 28 b0 42 07 42 dd c3 4c 4e 45 2a ae ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("OxyPlot")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright (c) 2014 OxyPlot contributors.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("OxyPlot core library")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2014.1.299.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("OxyPlot")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("OxyPlot")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="OxyPlot.XamarinIOS" Version="0.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="OxyPlot.XamarinAndroid" Version="2014.1.299.1">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("OxyPlot")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright (c) 2014 OxyPlot contributors.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2014.1.299.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("OxyPlot")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("OxyPlot.XamarinAndroid")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>Start with creating a <see cref="T:OxyPlot.PlotModel" />. Add axes and series to the model. Then create a <see cref="T:OxyPlot.XamarinIOS.PlotView" /> (iOS) or <see cref="T:OxyPlot.XamarinAndroid.PlotView" /> (Android) to display the plot in your user interface.</Remarks>
  <Copyright>Copyright (c) 2014 OxyPlot contributors.</Copyright>
  <Types>
    <Namespace Name="OxyPlot">
      <Type Name="ArrayHelper" Kind="Class" />
      <Type Name="Arrays" Kind="Class" />
      <Type Name="AxisUtilities" Kind="Class" />
      <Type Name="BinaryReaderExtensions" Kind="Class" />
      <Type Name="BitReader" Kind="Class" />
      <Type Name="BmpDecoder" Kind="Class" />
      <Type Name="BmpEncoder" Kind="Class" />
      <Type Name="BmpEncoderOptions" Kind="Class" />
      <Type Name="ByteBitReader" Kind="Class" />
      <Type Name="CodeGenerationAttribute" Kind="Class" />
      <Type Name="CodeGenerator" Kind="Class" />
      <Type Name="CodeGeneratorStringExtensions" Kind="Class" />
      <Type Name="CohenSutherlandClipping" Kind="Class" />
      <Type Name="ColorSpace" Kind="Enumeration" />
      <Type Name="ColorType" Kind="Enumeration" />
      <Type Name="CompressionMethod" Kind="Enumeration" />
      <Type Name="Conrec" Kind="Class" />
      <Type Name="Conrec+RendererDelegate" Kind="Delegate" />
      <Type Name="CursorType" Kind="Enumeration" />
      <Type Name="DataPoint" Kind="Structure" />
      <Type Name="Decimator" Kind="Class" />
      <Type Name="Deflate" Kind="Class" />
      <Type Name="DelegatePlotControllerCommand`1" DisplayName="DelegatePlotControllerCommand&lt;T&gt;" Kind="Class" />
      <Type Name="FilterMethod" Kind="Enumeration" />
      <Type Name="FontEncoding" Kind="Enumeration" />
      <Type Name="FontSubType" Kind="Enumeration" />
      <Type Name="FontWeights" Kind="Class" />
      <Type Name="FractionHelper" Kind="Class" />
      <Type Name="HitTestArguments" Kind="Class" />
      <Type Name="HitTestResult" Kind="Class" />
      <Type Name="HorizontalAlignment" Kind="Enumeration" />
      <Type Name="ICodeGenerating" Kind="Interface" />
      <Type Name="IDataPointProvider" Kind="Interface" />
      <Type Name="IImageDecoder" Kind="Interface" />
      <Type Name="IImageEncoder" Kind="Interface" />
      <Type Name="ImageEncoderOptions" Kind="Class" />
      <Type Name="ImageFormat" Kind="Enumeration" />
      <Type Name="InputCommandBinding" Kind="Class" />
      <Type Name="InterlaceMethod" Kind="Enumeration" />
      <Type Name="IPlotControl" Kind="Interface" />
      <Type Name="IPlotController" Kind="Interface" />
      <Type Name="IPlotControllerCommand" Kind="Interface" />
      <Type Name="IPlotControllerCommand`1" DisplayName="IPlotControllerCommand&lt;T&gt;" Kind="Interface" />
      <Type Name="IPlotElement" Kind="Interface" />
      <Type Name="IRenderContext" Kind="Interface" />
      <Type Name="LegendItemOrder" Kind="Enumeration" />
      <Type Name="LegendOrientation" Kind="Enumeration" />
      <Type Name="LegendPlacement" Kind="Enumeration" />
      <Type Name="LegendPosition" Kind="Enumeration" />
      <Type Name="LegendSymbolPlacement" Kind="Enumeration" />
      <Type Name="LineCap" Kind="Enumeration" />
      <Type Name="LineJoin" Kind="Enumeration" />
      <Type Name="LineStyle" Kind="Enumeration" />
      <Type Name="LineStyleHelper" Kind="Class" />
      <Type Name="ListFiller`1" DisplayName="ListFiller&lt;T&gt;" Kind="Class" />
      <Type Name="ManipulatorBase`1" DisplayName="ManipulatorBase&lt;T&gt;" Kind="Class" />
      <Type Name="MarkerType" Kind="Enumeration" />
      <Type Name="MathRenderingExtensions" Kind="Class" />
      <Type Name="MouseManipulator" Kind="Class" />
      <Type Name="OxyColor" Kind="Structure" />
      <Type Name="OxyColorExtensions" Kind="Class" />
      <Type Name="OxyColors" Kind="Class" />
      <Type Name="OxyImage" Kind="Class" />
      <Type Name="OxyImageInfo" Kind="Class" />
      <Type Name="OxyInputEventArgs" Kind="Class" />
      <Type Name="OxyInputGesture" Kind="Class" />
      <Type Name="OxyKey" Kind="Enumeration" />
      <Type Name="OxyKeyEventArgs" Kind="Class" />
      <Type Name="OxyKeyGesture" Kind="Class" />
      <Type Name="OxyModifierKeys" Kind="Enumeration" />
      <Type Name="OxyMouseButton" Kind="Enumeration" />
      <Type Name="OxyMouseDownEventArgs" Kind="Class" />
      <Type Name="OxyMouseDownGesture" Kind="Class" />
      <Type Name="OxyMouseEnterGesture" Kind="Class" />
      <Type Name="OxyMouseEventArgs" Kind="Class" />
      <Type Name="OxyMouseWheelEventArgs" Kind="Class" />
      <Type Name="OxyMouseWheelGesture" Kind="Class" />
      <Type Name="OxyPalette" Kind="Class" />
      <Type Name="OxyPalettes" Kind="Class" />
      <Type Name="OxyPen" Kind="Class" />
      <Type Name="OxyPenLineJoin" Kind="Enumeration" />
      <Type Name="OxyRect" Kind="Structure" />
      <Type Name="OxyShakeGesture" Kind="Class" />
      <Type Name="OxySize" Kind="Structure" />
      <Type Name="OxyThickness" Kind="Structure" />
      <Type Name="OxyTouchEventArgs" Kind="Class" />
      <Type Name="OxyTouchGesture" Kind="Class" />
      <Type Name="PageOrientation" Kind="Enumeration" />
      <Type Name="PageSize" Kind="Enumeration" />
      <Type Name="PanManipulator" Kind="Class" />
      <Type Name="PdfExporter" Kind="Class" />
      <Type Name="PlotCommands" Kind="Class" />
      <Type Name="PlotController" Kind="Class" />
      <Type Name="PlotControllerBase" Kind="Class" />
      <Type Name="PlotControllerExtensions" Kind="Class" />
      <Type Name="PlotElement" Kind="Class" />
      <Type Name="PlotElementCollection`1" DisplayName="PlotElementCollection&lt;T&gt;" Kind="Class" />
      <Type Name="PlotLength" Kind="Structure" />
      <Type Name="PlotLengthUnit" Kind="Enumeration" />
      <Type Name="PlotModel" Kind="Class" />
      <Type Name="PlotType" Kind="Enumeration" />
      <Type Name="PngDecoder" Kind="Class" />
      <Type Name="PngEncoder" Kind="Class" />
      <Type Name="PngEncoderOptions" Kind="Class" />
      <Type Name="PortableDocument" Kind="Class" />
      <Type Name="PortableDocumentExtensions" Kind="Class" />
      <Type Name="PortableDocumentFont" Kind="Class" />
      <Type Name="PortableDocumentFontFamily" Kind="Class" />
      <Type Name="PortableDocumentImage" Kind="Class" />
      <Type Name="PortableDocumentImageUtilities" Kind="Class" />
      <Type Name="ReflectionHelper" Kind="Class" />
      <Type Name="RenderContextBase" Kind="Class" />
      <Type Name="RenderingExtensions" Kind="Class" />
      <Type Name="ScreenPoint" Kind="Structure" />
      <Type Name="ScreenPointHelper" Kind="Class" />
      <Type Name="ScreenVector" Kind="Structure" />
      <Type Name="SelectablePlotElement" Kind="Class" />
      <Type Name="Selection" Kind="Class" />
      <Type Name="Selection+SelectionItem" Kind="Structure" />
      <Type Name="SelectionMode" Kind="Enumeration" />
      <Type Name="StandardFonts" Kind="Class" />
      <Type Name="StreamExtensions" Kind="Class" />
      <Type Name="StringHelper" Kind="Class" />
      <Type Name="SutherlandHodgmanClipping" Kind="Class" />
      <Type Name="SvgExporter" Kind="Class" />
      <Type Name="SvgRenderContext" Kind="Class" />
      <Type Name="SvgWriter" Kind="Class" />
      <Type Name="TitleHorizontalAlignment" Kind="Enumeration" />
      <Type Name="TouchManipulator" Kind="Class" />
      <Type Name="TrackerEventArgs" Kind="Class" />
      <Type Name="TrackerHitResult" Kind="Class" />
      <Type Name="TrackerManipulator" Kind="Class" />
      <Type Name="UIPlotElement" Kind="Class" />
      <Type Name="VerticalAlignment" Kind="Enumeration" />
      <Type Name="XkcdRenderingDecorator" Kind="Class" />
      <Type Name="XmlWriterBase" Kind="Class" />
      <Type Name="ZoomRectangleManipulator" Kind="Class" />
      <Type Name="ZoomStepManipulator" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.Annotations">
      <Type Name="Annotation" Kind="Class" />
      <Type Name="AnnotationLayer" Kind="Enumeration" />
      <Type Name="AnnotationTextOrientation" Kind="Enumeration" />
      <Type Name="ArrowAnnotation" Kind="Class" />
      <Type Name="EllipseAnnotation" Kind="Class" />
      <Type Name="FunctionAnnotation" Kind="Class" />
      <Type Name="FunctionAnnotationType" Kind="Enumeration" />
      <Type Name="ImageAnnotation" Kind="Class" />
      <Type Name="LineAnnotation" Kind="Class" />
      <Type Name="LineAnnotationType" Kind="Enumeration" />
      <Type Name="PathAnnotation" Kind="Class" />
      <Type Name="PolygonAnnotation" Kind="Class" />
      <Type Name="PolylineAnnotation" Kind="Class" />
      <Type Name="RectangleAnnotation" Kind="Class" />
      <Type Name="TextAnnotation" Kind="Class" />
      <Type Name="TextualAnnotation" Kind="Class" />
      <Type Name="TileMapAnnotation" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.Axes">
      <Type Name="AngleAxis" Kind="Class" />
      <Type Name="AngleAxisRenderer" Kind="Class" />
      <Type Name="Axis" Kind="Class" />
      <Type Name="AxisChangedEventArgs" Kind="Class" />
      <Type Name="AxisChangeTypes" Kind="Enumeration" />
      <Type Name="AxisLayer" Kind="Enumeration" />
      <Type Name="AxisPosition" Kind="Enumeration" />
      <Type Name="AxisRendererBase" Kind="Class" />
      <Type Name="CategoryAxis" Kind="Class" />
      <Type Name="CategoryColorAxis" Kind="Class" />
      <Type Name="ColorAxisExtensions" Kind="Class" />
      <Type Name="DateTimeAxis" Kind="Class" />
      <Type Name="DateTimeIntervalType" Kind="Enumeration" />
      <Type Name="HorizontalAndVerticalAxisRenderer" Kind="Class" />
      <Type Name="IColorAxis" Kind="Interface" />
      <Type Name="LinearAxis" Kind="Class" />
      <Type Name="LinearColorAxis" Kind="Class" />
      <Type Name="LogarithmicAxis" Kind="Class" />
      <Type Name="MagnitudeAxis" Kind="Class" />
      <Type Name="MagnitudeAxisRenderer" Kind="Class" />
      <Type Name="RangeColorAxis" Kind="Class" />
      <Type Name="TickStyle" Kind="Enumeration" />
      <Type Name="TimeSpanAxis" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.Reporting">
      <Type Name="Alignment" Kind="Enumeration" />
      <Type Name="DrawingFigure" Kind="Class" />
      <Type Name="DrawingFigure+DrawingFormat" Kind="Enumeration" />
      <Type Name="Equation" Kind="Class" />
      <Type Name="Figure" Kind="Class" />
      <Type Name="Header" Kind="Class" />
      <Type Name="HeaderHelper" Kind="Class" />
      <Type Name="HtmlPlotElementType" Kind="Enumeration" />
      <Type Name="HtmlReportWriter" Kind="Class" />
      <Type Name="Image" Kind="Class" />
      <Type Name="IReportWriter" Kind="Interface" />
      <Type Name="ItemsTable" Kind="Class" />
      <Type Name="ItemsTableField" Kind="Class" />
      <Type Name="Paragraph" Kind="Class" />
      <Type Name="ParagraphStyle" Kind="Class" />
      <Type Name="PlotFigure" Kind="Class" />
      <Type Name="PropertyTable" Kind="Class" />
      <Type Name="Report" Kind="Class" />
      <Type Name="ReportItem" Kind="Class" />
      <Type Name="ReportSection" Kind="Class" />
      <Type Name="ReportStyle" Kind="Class" />
      <Type Name="StringExtensions" Kind="Class" />
      <Type Name="Table" Kind="Class" />
      <Type Name="TableCell" Kind="Class" />
      <Type Name="TableColumn" Kind="Class" />
      <Type Name="TableOfContents" Kind="Class" />
      <Type Name="TableOfContents+ContentItem" Kind="Class" />
      <Type Name="TableRow" Kind="Class" />
      <Type Name="TextReportWriter" Kind="Class" />
      <Type Name="WikiReportWriter" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.Series">
      <Type Name="AreaSeries" Kind="Class" />
      <Type Name="BarItem" Kind="Class" />
      <Type Name="BarItemBase" Kind="Class" />
      <Type Name="BarSeries" Kind="Class" />
      <Type Name="BarSeriesBase" Kind="Class" />
      <Type Name="BarSeriesBase`1" DisplayName="BarSeriesBase&lt;T&gt;" Kind="Class" />
      <Type Name="BoxPlotItem" Kind="Structure" />
      <Type Name="BoxPlotSeries" Kind="Class" />
      <Type Name="CandleStickSeries" Kind="Class" />
      <Type Name="CategorizedItem" Kind="Class" />
      <Type Name="CategorizedSeries" Kind="Class" />
      <Type Name="ColumnItem" Kind="Class" />
      <Type Name="ColumnSeries" Kind="Class" />
      <Type Name="ContourSeries" Kind="Class" />
      <Type Name="DataPointSeries" Kind="Class" />
      <Type Name="ErrorColumnItem" Kind="Class" />
      <Type Name="ErrorColumnSeries" Kind="Class" />
      <Type Name="FunctionSeries" Kind="Class" />
      <Type Name="HeatMapCoordinateDefinition" Kind="Enumeration" />
      <Type Name="HeatMapSeries" Kind="Class" />
      <Type Name="HighLowItem" Kind="Class" />
      <Type Name="HighLowSeries" Kind="Class" />
      <Type Name="IntervalBarItem" Kind="Class" />
      <Type Name="IntervalBarSeries" Kind="Class" />
      <Type Name="IScatterPointProvider" Kind="Interface" />
      <Type Name="IStackableSeries" Kind="Interface" />
      <Type Name="ItemsSeries" Kind="Class" />
      <Type Name="ITrackableSeries" Kind="Interface" />
      <Type Name="LabelPlacement" Kind="Enumeration" />
      <Type Name="LineLegendPosition" Kind="Enumeration" />
      <Type Name="LineSeries" Kind="Class" />
      <Type Name="LineSeries+Segment" Kind="Class" />
      <Type Name="PieSeries" Kind="Class" />
      <Type Name="PieSlice" Kind="Class" />
      <Type Name="RectangleBarItem" Kind="Class" />
      <Type Name="RectangleBarSeries" Kind="Class" />
      <Type Name="ScatterPoint" Kind="Class" />
      <Type Name="ScatterSeries" Kind="Class" />
      <Type Name="Series" Kind="Class" />
      <Type Name="StairStepSeries" Kind="Class" />
      <Type Name="StemSeries" Kind="Class" />
      <Type Name="TornadoBarItem" Kind="Class" />
      <Type Name="TornadoBarSeries" Kind="Class" />
      <Type Name="TwoColorLineSeries" Kind="Class" />
      <Type Name="XYAxisSeries" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.XamarinAndroid">
      <Type Name="CanvasRenderContext" Kind="Class" />
      <Type Name="ExtensionMethods" Kind="Class" />
      <Type Name="PlotView" Kind="Class" />
    </Namespace>
    <Namespace Name="OxyPlot.XamarinIOS">
      <Type Name="ConverterExtensions" Kind="Class" />
      <Type Name="ExportExtensions" Kind="Class" />
      <Type Name="MonoTouchRenderContext" Kind="Class" />
      <Type Name="PlotView" Kind="Class" />
    </Namespace>
  </Types>
  <Title>OxyPlot</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double[]" />
      </Targets>
      <Member MemberName="Fill">
        <MemberSignature Language="C#" Value="public static void Fill (this double[] array, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill(float64[] array, float64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="array" Type="System.Double[]" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="array">The array.</param>
          <param name="value">The value.</param>
          <summary>
            Fills the array with the specified value.
            </summary>
        </Docs>
        <Link Type="OxyPlot.ArrayHelper" Member="M:OxyPlot.ArrayHelper.Fill(System.Double[],System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double[0:,0:]" />
      </Targets>
      <Member MemberName="Fill2D">
        <MemberSignature Language="C#" Value="public static void Fill2D (this double[,] array, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fill2D(float64[,] array, float64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="array" Type="System.Double[,]" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="array">The two-dimensional array.</param>
          <param name="value">The value.</param>
          <summary>
            Fills the two-dimensional array with the specified value.
            </summary>
        </Docs>
        <Link Type="OxyPlot.ArrayHelper" Member="M:OxyPlot.ArrayHelper.Fill2D(System.Double[0:,0:],System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GetHashCode">
        <MemberSignature Language="C#" Value="public static int GetHashCode (this System.Collections.Generic.IEnumerable&lt;object&gt; items);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(class System.Collections.Generic.IEnumerable`1&lt;object&gt; items) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;System.Object&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="items">A sequence of items.</param>
          <summary>
            Calculates a hash code for the specified sequence of items.
            </summary>
        </Docs>
        <Link Type="OxyPlot.ArrayHelper" Member="M:OxyPlot.ArrayHelper.GetHashCode(System.Collections.Generic.IEnumerable{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double[0:,0:]" />
      </Targets>
      <Member MemberName="Max2D">
        <MemberSignature Language="C#" Value="public static double Max2D (this double[,] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max2D(float64[,] array) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="array" Type="System.Double[,]" RefType="this" />
        </Parameters>
        <Docs>
          <param name="array">The array.</param>
          <summary>
            Finds the maximum value in the specified 2D array (NaN values not included).
            </summary>
        </Docs>
        <Link Type="OxyPlot.ArrayHelper" Member="M:OxyPlot.ArrayHelper.Max2D(System.Double[0:,0:])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double[0:,0:]" />
      </Targets>
      <Member MemberName="Min2D">
        <MemberSignature Language="C#" Value="public static double Min2D (this double[,] array, bool excludeNaN = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min2D(float64[,] array, bool excludeNaN) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="array" Type="System.Double[,]" RefType="this" />
          <Parameter Name="excludeNaN" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="array">The array.</param>
          <param name="excludeNaN">Exclude NaN values if set to <c>true</c>.</param>
          <summary>
            Finds the minimum value in the specified 2D array.
            </summary>
        </Docs>
        <Link Type="OxyPlot.ArrayHelper" Member="M:OxyPlot.ArrayHelper.Min2D(System.Double[0:,0:],System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.Axes.IColorAxis" />
      </Targets>
      <Member MemberName="GetColor">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyColor GetColor (this OxyPlot.Axes.IColorAxis axis, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyColor GetColor(class OxyPlot.Axes.IColorAxis axis, float64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="axis" Type="OxyPlot.Axes.IColorAxis" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="axis">The axis.</param>
          <param name="value">The value.</param>
          <summary>
            Gets the color for the specified value.
            </summary>
        </Docs>
        <Link Type="OxyPlot.Axes.ColorAxisExtensions" Member="M:OxyPlot.Axes.ColorAxisExtensions.GetColor(OxyPlot.Axes.IColorAxis,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadBigEndianDouble">
        <MemberSignature Language="C#" Value="public static double ReadBigEndianDouble (this System.IO.BinaryReader r);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ReadBigEndianDouble(class System.IO.BinaryReader r) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <summary>
            Reads a big endian (Motorola convention) 64-bit floating point number.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadBigEndianDouble(System.IO.BinaryReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadBigEndianInt32">
        <MemberSignature Language="C#" Value="public static int ReadBigEndianInt32 (this System.IO.BinaryReader r);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadBigEndianInt32(class System.IO.BinaryReader r) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <summary>
            Reads a big endian (Motorola convention) signed 32-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadBigEndianInt32(System.IO.BinaryReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadBigEndianUInt16">
        <MemberSignature Language="C#" Value="public static ushort ReadBigEndianUInt16 (this System.IO.BinaryReader r);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ReadBigEndianUInt16(class System.IO.BinaryReader r) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt16</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <summary>
            Reads a big endian (Motorola convention) unsigned 16-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadBigEndianUInt16(System.IO.BinaryReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadBigEndianUInt32">
        <MemberSignature Language="C#" Value="public static uint ReadBigEndianUInt32 (this System.IO.BinaryReader r);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ReadBigEndianUInt32(class System.IO.BinaryReader r) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <summary>
            Reads a big endian (Motorola convention) unsigned 32-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadBigEndianUInt32(System.IO.BinaryReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadDouble">
        <MemberSignature Language="C#" Value="public static double ReadDouble (this System.IO.BinaryReader r, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ReadDouble(class System.IO.BinaryReader r, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads an 64-bit floating point value.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadDouble(System.IO.BinaryReader,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadInt32">
        <MemberSignature Language="C#" Value="public static int ReadInt32 (this System.IO.BinaryReader r, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(class System.IO.BinaryReader r, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads a signed 32-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadInt32(System.IO.BinaryReader,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadString">
        <MemberSignature Language="C#" Value="public static string ReadString (this System.IO.BinaryReader r, int length, System.Text.Encoding encoding = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadString(class System.IO.BinaryReader r, int32 length, class System.Text.Encoding encoding) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="length" Type="System.Int32" />
          <Parameter Name="encoding" Type="System.Text.Encoding" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="length">The length.</param>
          <param name="encoding">The encoding.</param>
          <summary>
            Reads a string of the specified length (in bytes).
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadString(System.IO.BinaryReader,System.Int32,System.Text.Encoding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadUInt16">
        <MemberSignature Language="C#" Value="public static ushort ReadUInt16 (this System.IO.BinaryReader r, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ReadUInt16(class System.IO.BinaryReader r, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt16</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads an unsigned 16-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadUInt16(System.IO.BinaryReader,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadUInt16Array">
        <MemberSignature Language="C#" Value="public static ushort[] ReadUInt16Array (this System.IO.BinaryReader r, int count, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16[] ReadUInt16Array(class System.IO.BinaryReader r, int32 count, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt16[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="count">The number of values to read.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads an array of unsigned 16-bit integers.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadUInt16Array(System.IO.BinaryReader,System.Int32,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadUInt32">
        <MemberSignature Language="C#" Value="public static uint ReadUInt32 (this System.IO.BinaryReader r, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ReadUInt32(class System.IO.BinaryReader r, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads an unsigned 32-bit integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadUInt32(System.IO.BinaryReader,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.BinaryReader" />
      </Targets>
      <Member MemberName="ReadUInt32Array">
        <MemberSignature Language="C#" Value="public static uint[] ReadUInt32Array (this System.IO.BinaryReader r, int count, bool isLittleEndian);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32[] ReadUInt32Array(class System.IO.BinaryReader r, int32 count, bool isLittleEndian) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt32[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="r" Type="System.IO.BinaryReader" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
          <Parameter Name="isLittleEndian" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="r">The reader.</param>
          <param name="count">The number of values to read.</param>
          <param name="isLittleEndian">Read as little endian (Intel convention) if set to <c>true</c>.</param>
          <summary>
            Reads an array of unsigned 32-bit integers.
            </summary>
        </Docs>
        <Link Type="OxyPlot.BinaryReaderExtensions" Member="M:OxyPlot.BinaryReaderExtensions.ReadUInt32Array(System.IO.BinaryReader,System.Int32,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Boolean" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(bool value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Boolean" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The value.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(float64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Double" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The instance.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Enum" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this Enum value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(class System.Enum value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Enum" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The instance.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Enum)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this int value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(int32 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The instance.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Object" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(object value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Object" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The instance.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(string value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">The instance.</param>
          <summary>
            Converts the value of this instance to c# code.
            </summary>
        </Docs>
        <Link Type="OxyPlot.CodeGeneratorStringExtensions" Member="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.LineStyle" />
      </Targets>
      <Member MemberName="GetDashArray">
        <MemberSignature Language="C#" Value="public static double[] GetDashArray (this OxyPlot.LineStyle style);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64[] GetDashArray(valuetype OxyPlot.LineStyle style) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="style" Type="OxyPlot.LineStyle" RefType="this" />
        </Parameters>
        <Docs>
          <param name="style">The line style.</param>
          <summary>
            Gets the stroke dash array for a given <see cref="T:OxyPlot.LineStyle" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.LineStyleHelper" Member="M:OxyPlot.LineStyleHelper.GetDashArray(OxyPlot.LineStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawMathText">
        <MemberSignature Language="C#" Value="public static void DrawMathText (this OxyPlot.IRenderContext rc, OxyPlot.ScreenPoint pt, string text, OxyPlot.OxyColor textColor, string fontFamily, double fontSize, double fontWeight, double angle, OxyPlot.HorizontalAlignment ha, OxyPlot.VerticalAlignment va, Nullable&lt;OxyPlot.OxySize&gt; maxsize = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMathText(class OxyPlot.IRenderContext rc, valuetype OxyPlot.ScreenPoint pt, string text, valuetype OxyPlot.OxyColor textColor, string fontFamily, float64 fontSize, float64 fontWeight, float64 angle, valuetype OxyPlot.HorizontalAlignment ha, valuetype OxyPlot.VerticalAlignment va, valuetype System.Nullable`1&lt;valuetype OxyPlot.OxySize&gt; maxsize) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="pt" Type="OxyPlot.ScreenPoint" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="textColor" Type="OxyPlot.OxyColor" />
          <Parameter Name="fontFamily" Type="System.String" />
          <Parameter Name="fontSize" Type="System.Double" />
          <Parameter Name="fontWeight" Type="System.Double" />
          <Parameter Name="angle" Type="System.Double" />
          <Parameter Name="ha" Type="OxyPlot.HorizontalAlignment" />
          <Parameter Name="va" Type="OxyPlot.VerticalAlignment" />
          <Parameter Name="maxsize" Type="System.Nullable&lt;OxyPlot.OxySize&gt;" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="pt">The point.</param>
          <param name="text">The text.</param>
          <param name="textColor">Color of the text.</param>
          <param name="fontFamily">The font family.</param>
          <param name="fontSize">The font size.</param>
          <param name="fontWeight">The font weight.</param>
          <param name="angle">The angle.</param>
          <param name="ha">The horizontal alignment.</param>
          <param name="va">The vertical alignment.</param>
          <param name="maxsize">The maximum size of the text.</param>
          <summary>
            Draws text containing sub- and superscript.
            </summary>
        </Docs>
        <Link Type="OxyPlot.MathRenderingExtensions" Member="M:OxyPlot.MathRenderingExtensions.DrawMathText(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawMathText">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxySize DrawMathText (this OxyPlot.IRenderContext rc, OxyPlot.ScreenPoint pt, string text, OxyPlot.OxyColor textColor, string fontFamily, double fontSize, double fontWeight, double angle, OxyPlot.HorizontalAlignment ha, OxyPlot.VerticalAlignment va, Nullable&lt;OxyPlot.OxySize&gt; maxsize, bool measure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxySize DrawMathText(class OxyPlot.IRenderContext rc, valuetype OxyPlot.ScreenPoint pt, string text, valuetype OxyPlot.OxyColor textColor, string fontFamily, float64 fontSize, float64 fontWeight, float64 angle, valuetype OxyPlot.HorizontalAlignment ha, valuetype OxyPlot.VerticalAlignment va, valuetype System.Nullable`1&lt;valuetype OxyPlot.OxySize&gt; maxsize, bool measure) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxySize</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="pt" Type="OxyPlot.ScreenPoint" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="textColor" Type="OxyPlot.OxyColor" />
          <Parameter Name="fontFamily" Type="System.String" />
          <Parameter Name="fontSize" Type="System.Double" />
          <Parameter Name="fontWeight" Type="System.Double" />
          <Parameter Name="angle" Type="System.Double" />
          <Parameter Name="ha" Type="OxyPlot.HorizontalAlignment" />
          <Parameter Name="va" Type="OxyPlot.VerticalAlignment" />
          <Parameter Name="maxsize" Type="System.Nullable&lt;OxyPlot.OxySize&gt;" />
          <Parameter Name="measure" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="pt">The point.</param>
          <param name="text">The text.</param>
          <param name="textColor">Color of the text.</param>
          <param name="fontFamily">The font family.</param>
          <param name="fontSize">The font size.</param>
          <param name="fontWeight">The font weight.</param>
          <param name="angle">The angle.</param>
          <param name="ha">The horizontal alignment.</param>
          <param name="va">The vertical alignment.</param>
          <param name="maxsize">The maximum size of the text.</param>
          <param name="measure">Measure the size of the text if set to <c>true</c>.</param>
          <summary>
            Draws or measures text containing sub- and superscript.
            </summary>
        </Docs>
        <Link Type="OxyPlot.MathRenderingExtensions" Member="M:OxyPlot.MathRenderingExtensions.DrawMathText(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="MeasureMathText">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxySize MeasureMathText (this OxyPlot.IRenderContext rc, string text, string fontFamily, double fontSize, double fontWeight);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxySize MeasureMathText(class OxyPlot.IRenderContext rc, string text, string fontFamily, float64 fontSize, float64 fontWeight) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxySize</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="fontFamily" Type="System.String" />
          <Parameter Name="fontSize" Type="System.Double" />
          <Parameter Name="fontWeight" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="text">The text.</param>
          <param name="fontFamily">The font family.</param>
          <param name="fontSize">The font size.</param>
          <param name="fontWeight">The font weight.</param>
          <summary>
            The measure math text.
            </summary>
        </Docs>
        <Link Type="OxyPlot.MathRenderingExtensions" Member="M:OxyPlot.MathRenderingExtensions.MeasureMathText(OxyPlot.IRenderContext,System.String,System.String,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ChangeIntensity">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyColor ChangeIntensity (this OxyPlot.OxyColor color, double factor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyColor ChangeIntensity(valuetype OxyPlot.OxyColor color, float64 factor) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
          <Parameter Name="factor" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <param name="factor">The factor.</param>
          <summary>
            Changes the intensity.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ChangeIntensity(OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ChangeSaturation">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyColor ChangeSaturation (this OxyPlot.OxyColor color, double factor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyColor ChangeSaturation(valuetype OxyPlot.OxyColor color, float64 factor) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
          <Parameter Name="factor" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <param name="factor">The factor.</param>
          <summary>
            Changes the intensity.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ChangeSaturation(OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="Complementary">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyColor Complementary (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyColor Complementary(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color to convert.</param>
          <summary>
            Calculates the complementary color.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.Complementary(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="GetColorName">
        <MemberSignature Language="C#" Value="public static string GetColorName (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetColorName(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <summary>
            Gets the name of the color if it is defined in the <see cref="T:OxyPlot.OxyColors" /> class.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.GetColorName(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToByteString">
        <MemberSignature Language="C#" Value="public static string ToByteString (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToByteString(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <summary>
            Converts an <see cref="T:OxyPlot.OxyColor" /> to a string containing the ARGB byte values.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ToByteString(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToCode">
        <MemberSignature Language="C#" Value="public static string ToCode (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToCode(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <summary>
            Returns C# code that generates this instance.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ToCode(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToHsv">
        <MemberSignature Language="C#" Value="public static double[] ToHsv (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64[] ToHsv(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <summary>
            Converts from a <see cref="T:OxyPlot.OxyColor" /> to HSV values (double)
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ToHsv(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToUint">
        <MemberSignature Language="C#" Value="public static uint ToUint (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUint(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.UInt32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color.</param>
          <summary>
            Converts to an unsigned integer.
            </summary>
        </Docs>
        <Link Type="OxyPlot.OxyColorExtensions" Member="M:OxyPlot.OxyColorExtensions.ToUint(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindKeyDown">
        <MemberSignature Language="C#" Value="public static void BindKeyDown (this OxyPlot.IPlotController controller, OxyPlot.OxyKey key, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyKeyEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindKeyDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyKey key, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyKeyEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="key" Type="OxyPlot.OxyKey" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyKeyEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="key">The key.</param>
          <param name="command">A plot controller command that takes key event arguments.</param>
          <summary>
            Binds the specified key to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindKeyDown(OxyPlot.IPlotController,OxyPlot.OxyKey,OxyPlot.IPlotControllerCommand{OxyPlot.OxyKeyEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindKeyDown">
        <MemberSignature Language="C#" Value="public static void BindKeyDown (this OxyPlot.IPlotController controller, OxyPlot.OxyKey key, OxyPlot.OxyModifierKeys modifiers, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyKeyEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindKeyDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyKey key, valuetype OxyPlot.OxyModifierKeys modifiers, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyKeyEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="key" Type="OxyPlot.OxyKey" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyKeyEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="key">The key.</param>
          <param name="modifiers">The key modifiers.</param>
          <param name="command">A plot controller command that takes key event arguments.</param>
          <summary>
            Binds the specified modifier+key to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindKeyDown(OxyPlot.IPlotController,OxyPlot.OxyKey,OxyPlot.OxyModifierKeys,OxyPlot.IPlotControllerCommand{OxyPlot.OxyKeyEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseDown">
        <MemberSignature Language="C#" Value="public static void BindMouseDown (this OxyPlot.IPlotController controller, OxyPlot.OxyMouseButton mouseButton, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyMouseButton mouseButton, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseDownEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="mouseButton" Type="OxyPlot.OxyMouseButton" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="mouseButton">The mouse button.</param>
          <param name="command">A plot controller command that takes mouse event arguments.</param>
          <summary>
            Binds the specified mouse button to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseDown(OxyPlot.IPlotController,OxyPlot.OxyMouseButton,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseDownEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseDown">
        <MemberSignature Language="C#" Value="public static void BindMouseDown (this OxyPlot.IPlotController controller, OxyPlot.OxyMouseButton mouseButton, OxyPlot.OxyModifierKeys modifiers, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyMouseButton mouseButton, valuetype OxyPlot.OxyModifierKeys modifiers, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseDownEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="mouseButton" Type="OxyPlot.OxyMouseButton" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="mouseButton">The mouse button.</param>
          <param name="modifiers">The modifiers.</param>
          <param name="command">A plot controller command that takes mouse event arguments.</param>
          <summary>
            Binds the specified modifier+mouse button gesture to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseDown(OxyPlot.IPlotController,OxyPlot.OxyMouseButton,OxyPlot.OxyModifierKeys,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseDownEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseDown">
        <MemberSignature Language="C#" Value="public static void BindMouseDown (this OxyPlot.IPlotController controller, OxyPlot.OxyMouseButton mouseButton, OxyPlot.OxyModifierKeys modifiers, int clickCount, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyMouseButton mouseButton, valuetype OxyPlot.OxyModifierKeys modifiers, int32 clickCount, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseDownEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="mouseButton" Type="OxyPlot.OxyMouseButton" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
          <Parameter Name="clickCount" Type="System.Int32" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseDownEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="mouseButton">The mouse button.</param>
          <param name="modifiers">The modifiers.</param>
          <param name="clickCount">The click count.</param>
          <param name="command">A plot controller command that takes mouse event arguments.</param>
          <summary>
            Binds the specified modifiers+mouse button+click count gesture to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseDown(OxyPlot.IPlotController,OxyPlot.OxyMouseButton,OxyPlot.OxyModifierKeys,System.Int32,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseDownEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseEnter">
        <MemberSignature Language="C#" Value="public static void BindMouseEnter (this OxyPlot.IPlotController controller, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseEnter(class OxyPlot.IPlotController controller, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="command">A plot controller command that takes mouse event arguments.</param>
          <summary>
            Binds the mouse enter event to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseEnter(OxyPlot.IPlotController,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseWheel">
        <MemberSignature Language="C#" Value="public static void BindMouseWheel (this OxyPlot.IPlotController controller, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseWheelEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseWheel(class OxyPlot.IPlotController controller, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseWheelEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseWheelEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="command">A plot controller command that takes mouse wheel event arguments.</param>
          <summary>
            Binds the mouse wheel event to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseWheel(OxyPlot.IPlotController,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseWheelEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindMouseWheel">
        <MemberSignature Language="C#" Value="public static void BindMouseWheel (this OxyPlot.IPlotController controller, OxyPlot.OxyModifierKeys modifiers, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseWheelEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindMouseWheel(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyModifierKeys modifiers, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyMouseWheelEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyMouseWheelEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="modifiers">The modifier key(s).</param>
          <param name="command">A plot controller command that takes mouse wheel event arguments.</param>
          <summary>
            Binds the modifier+mouse wheel event to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindMouseWheel(OxyPlot.IPlotController,OxyPlot.OxyModifierKeys,OxyPlot.IPlotControllerCommand{OxyPlot.OxyMouseWheelEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="BindTouchDown">
        <MemberSignature Language="C#" Value="public static void BindTouchDown (this OxyPlot.IPlotController controller, OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyTouchEventArgs&gt; command);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindTouchDown(class OxyPlot.IPlotController controller, class OxyPlot.IPlotControllerCommand`1&lt;class OxyPlot.OxyTouchEventArgs&gt; command) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="command" Type="OxyPlot.IPlotControllerCommand&lt;OxyPlot.OxyTouchEventArgs&gt;" />
        </Parameters>
        <Docs>
          <param name="controller">The plot controller.</param>
          <param name="command">A plot controller command that takes touch event arguments.</param>
          <summary>
            Binds the touch down event to the specified command.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.BindTouchDown(OxyPlot.IPlotController,OxyPlot.IPlotControllerCommand{OxyPlot.OxyTouchEventArgs})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="UnbindKeyDown">
        <MemberSignature Language="C#" Value="public static void UnbindKeyDown (this OxyPlot.IPlotController controller, OxyPlot.OxyKey key, OxyPlot.OxyModifierKeys modifiers = OxyPlot.OxyModifierKeys.None);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnbindKeyDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyKey key, valuetype OxyPlot.OxyModifierKeys modifiers) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="key" Type="OxyPlot.OxyKey" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
        </Parameters>
        <Docs>
          <param name="controller">The controller.</param>
          <param name="key">The key.</param>
          <param name="modifiers">The modifier keys.</param>
          <summary>
            Unbinds the specified key down gesture.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.UnbindKeyDown(OxyPlot.IPlotController,OxyPlot.OxyKey,OxyPlot.OxyModifierKeys)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="UnbindMouseDown">
        <MemberSignature Language="C#" Value="public static void UnbindMouseDown (this OxyPlot.IPlotController controller, OxyPlot.OxyMouseButton mouseButton, OxyPlot.OxyModifierKeys modifiers = OxyPlot.OxyModifierKeys.None, int clickCount = 1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnbindMouseDown(class OxyPlot.IPlotController controller, valuetype OxyPlot.OxyMouseButton mouseButton, valuetype OxyPlot.OxyModifierKeys modifiers, int32 clickCount) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
          <Parameter Name="mouseButton" Type="OxyPlot.OxyMouseButton" />
          <Parameter Name="modifiers" Type="OxyPlot.OxyModifierKeys" />
          <Parameter Name="clickCount" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="controller">The controller.</param>
          <param name="mouseButton">The mouse button.</param>
          <param name="modifiers">The modifier keys.</param>
          <param name="clickCount">The click count.</param>
          <summary>
            Unbinds the specified mouse down gesture.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.UnbindMouseDown(OxyPlot.IPlotController,OxyPlot.OxyMouseButton,OxyPlot.OxyModifierKeys,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="UnbindMouseEnter">
        <MemberSignature Language="C#" Value="public static void UnbindMouseEnter (this OxyPlot.IPlotController controller);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnbindMouseEnter(class OxyPlot.IPlotController controller) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
        </Parameters>
        <Docs>
          <param name="controller">The controller.</param>
          <summary>
            Unbinds the mouse enter gesture.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.UnbindMouseEnter(OxyPlot.IPlotController)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="UnbindMouseWheel">
        <MemberSignature Language="C#" Value="public static void UnbindMouseWheel (this OxyPlot.IPlotController controller);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnbindMouseWheel(class OxyPlot.IPlotController controller) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
        </Parameters>
        <Docs>
          <param name="controller">The controller.</param>
          <summary>
            Unbinds the mouse wheel gesture.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.UnbindMouseWheel(OxyPlot.IPlotController)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IPlotController" />
      </Targets>
      <Member MemberName="UnbindTouchDown">
        <MemberSignature Language="C#" Value="public static void UnbindTouchDown (this OxyPlot.IPlotController controller);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnbindTouchDown(class OxyPlot.IPlotController controller) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="controller" Type="OxyPlot.IPlotController" RefType="this" />
        </Parameters>
        <Docs>
          <param name="controller">The controller.</param>
          <summary>
            Unbinds the touch down gesture.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PlotControllerExtensions" Member="M:OxyPlot.PlotControllerExtensions.UnbindTouchDown(OxyPlot.IPlotController)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.PortableDocument" />
      </Targets>
      <Member MemberName="SetColor">
        <MemberSignature Language="C#" Value="public static void SetColor (this OxyPlot.PortableDocument doc, OxyPlot.OxyColor c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetColor(class OxyPlot.PortableDocument doc, valuetype OxyPlot.OxyColor c) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="doc" Type="OxyPlot.PortableDocument" RefType="this" />
          <Parameter Name="c" Type="OxyPlot.OxyColor" />
        </Parameters>
        <Docs>
          <param name="doc">The document.</param>
          <param name="c">The color.</param>
          <summary>
            Sets the stroke color.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PortableDocumentExtensions" Member="M:OxyPlot.PortableDocumentExtensions.SetColor(OxyPlot.PortableDocument,OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.PortableDocument" />
      </Targets>
      <Member MemberName="SetFillColor">
        <MemberSignature Language="C#" Value="public static void SetFillColor (this OxyPlot.PortableDocument doc, OxyPlot.OxyColor c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFillColor(class OxyPlot.PortableDocument doc, valuetype OxyPlot.OxyColor c) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="doc" Type="OxyPlot.PortableDocument" RefType="this" />
          <Parameter Name="c" Type="OxyPlot.OxyColor" />
        </Parameters>
        <Docs>
          <param name="doc">The document.</param>
          <param name="c">The color.</param>
          <summary>
            Sets the fill color.
            </summary>
        </Docs>
        <Link Type="OxyPlot.PortableDocumentExtensions" Member="M:OxyPlot.PortableDocumentExtensions.SetFillColor(OxyPlot.PortableDocument,OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedEllipse">
        <MemberSignature Language="C#" Value="public static void DrawClippedEllipse (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect clippingRectangle, OxyPlot.OxyRect rect, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double thickness, int n = 100);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedEllipse(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.OxyRect rect, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 thickness, int32 n) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="rect" Type="OxyPlot.OxyRect" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="thickness" Type="System.Double" />
          <Parameter Name="n" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="rect">The rectangle.</param>
          <param name="fill">The fill color.</param>
          <param name="stroke">The stroke color.</param>
          <param name="thickness">The stroke thickness.</param>
          <param name="n">The number of points around the ellipse.</param>
          <summary>
            Draws a clipped ellipse.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedEllipse(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedImage">
        <MemberSignature Language="C#" Value="public static void DrawClippedImage (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect clippingRect, OxyPlot.OxyImage source, double x, double y, double w, double h, double opacity, bool interpolate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedImage(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect clippingRect, class OxyPlot.OxyImage source, float64 x, float64 y, float64 w, float64 h, float64 opacity, bool interpolate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="clippingRect" Type="OxyPlot.OxyRect" />
          <Parameter Name="source" Type="OxyPlot.OxyImage" />
          <Parameter Name="x" Type="System.Double" />
          <Parameter Name="y" Type="System.Double" />
          <Parameter Name="w" Type="System.Double" />
          <Parameter Name="h" Type="System.Double" />
          <Parameter Name="opacity" Type="System.Double" />
          <Parameter Name="interpolate" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="clippingRect">The clipping rectangle.</param>
          <param name="source">The source.</param>
          <param name="x">The destination X position.</param>
          <param name="y">The destination Y position.</param>
          <param name="w">The width.</param>
          <param name="h">The height.</param>
          <param name="opacity">The opacity.</param>
          <param name="interpolate">interpolate if set to <c>true</c>.</param>
          <summary>
            Draws the clipped image.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedImage(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedLine">
        <MemberSignature Language="C#" Value="public static void DrawClippedLine (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; points, OxyPlot.OxyRect clippingRectangle, double minDistSquared, OxyPlot.OxyColor stroke, double strokeThickness, double[] dashArray, OxyPlot.OxyPenLineJoin lineJoin, bool aliased, System.Collections.Generic.List&lt;OxyPlot.ScreenPoint&gt; outputBuffer = null, Action&lt;System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;&gt; pointsRendered = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedLine(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; points, valuetype OxyPlot.OxyRect clippingRectangle, float64 minDistSquared, valuetype OxyPlot.OxyColor stroke, float64 strokeThickness, float64[] dashArray, valuetype OxyPlot.OxyPenLineJoin lineJoin, bool aliased, class System.Collections.Generic.List`1&lt;valuetype OxyPlot.ScreenPoint&gt; outputBuffer, class System.Action`1&lt;class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt;&gt; pointsRendered) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="points" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="minDistSquared" Type="System.Double" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="strokeThickness" Type="System.Double" />
          <Parameter Name="dashArray" Type="System.Double[]" />
          <Parameter Name="lineJoin" Type="OxyPlot.OxyPenLineJoin" />
          <Parameter Name="aliased" Type="System.Boolean" />
          <Parameter Name="outputBuffer" Type="System.Collections.Generic.List&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="pointsRendered" Type="System.Action&lt;System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="points">The points.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="minDistSquared">The minimum line segment length (squared).</param>
          <param name="stroke">The stroke color.</param>
          <param name="strokeThickness">The stroke thickness.</param>
          <param name="dashArray">The dash array (in device independent units, 1/96 inch).</param>
          <param name="lineJoin">The line join.</param>
          <param name="aliased">Set to <c>true</c> to draw as an aliased line.</param>
          <param name="outputBuffer">The output buffer.</param>
          <param name="pointsRendered">The points rendered callback.</param>
          <summary>
            Draws a clipped polyline through the specified points.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedLine(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,System.Double,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean,System.Collections.Generic.List{OxyPlot.ScreenPoint},System.Action{System.Collections.Generic.IList{OxyPlot.ScreenPoint}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedLineSegments">
        <MemberSignature Language="C#" Value="public static void DrawClippedLineSegments (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; points, OxyPlot.OxyRect clippingRectangle, OxyPlot.OxyColor stroke, double strokeThickness, double[] dashArray, OxyPlot.OxyPenLineJoin lineJoin, bool aliased);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedLineSegments(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; points, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.OxyColor stroke, float64 strokeThickness, float64[] dashArray, valuetype OxyPlot.OxyPenLineJoin lineJoin, bool aliased) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="points" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="strokeThickness" Type="System.Double" />
          <Parameter Name="dashArray" Type="System.Double[]" />
          <Parameter Name="lineJoin" Type="OxyPlot.OxyPenLineJoin" />
          <Parameter Name="aliased" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="points">The points.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="stroke">The stroke.</param>
          <param name="strokeThickness">The stroke thickness.</param>
          <param name="dashArray">The dash array (in device independent units, 1/96 inch).</param>
          <param name="lineJoin">The line join.</param>
          <param name="aliased">Set to <c>true</c> to draw as an aliased line.</param>
          <summary>
            Draws the clipped line segments.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedLineSegments(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedMathText">
        <MemberSignature Language="C#" Value="public static void DrawClippedMathText (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect clippingRectangle, OxyPlot.ScreenPoint p, string text, OxyPlot.OxyColor fill, string fontFamily = null, double fontSize = 10, double fontWeight = 500, double rotate = 0, OxyPlot.HorizontalAlignment horizontalAlignment = OxyPlot.HorizontalAlignment.Left, OxyPlot.VerticalAlignment verticalAlignment = OxyPlot.VerticalAlignment.Top, Nullable&lt;OxyPlot.OxySize&gt; maxSize = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedMathText(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.ScreenPoint p, string text, valuetype OxyPlot.OxyColor fill, string fontFamily, float64 fontSize, float64 fontWeight, float64 rotate, valuetype OxyPlot.HorizontalAlignment horizontalAlignment, valuetype OxyPlot.VerticalAlignment verticalAlignment, valuetype System.Nullable`1&lt;valuetype OxyPlot.OxySize&gt; maxSize) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="p" Type="OxyPlot.ScreenPoint" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="fontFamily" Type="System.String" />
          <Parameter Name="fontSize" Type="System.Double" />
          <Parameter Name="fontWeight" Type="System.Double" />
          <Parameter Name="rotate" Type="System.Double" />
          <Parameter Name="horizontalAlignment" Type="OxyPlot.HorizontalAlignment" />
          <Parameter Name="verticalAlignment" Type="OxyPlot.VerticalAlignment" />
          <Parameter Name="maxSize" Type="System.Nullable&lt;OxyPlot.OxySize&gt;" />
        </Parameters>
        <Docs>
          <param name="rc">The rendering context.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="p">The position.</param>
          <param name="text">The text.</param>
          <param name="fill">The fill color.</param>
          <param name="fontFamily">The font family.</param>
          <param name="fontSize">Size of the font.</param>
          <param name="fontWeight">The font weight.</param>
          <param name="rotate">The rotation angle.</param>
          <param name="horizontalAlignment">The horizontal align.</param>
          <param name="verticalAlignment">The vertical align.</param>
          <param name="maxSize">Size of the max.</param>
          <summary>
            Draws clipped math text.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedMathText(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedPolygon">
        <MemberSignature Language="C#" Value="public static void DrawClippedPolygon (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; points, OxyPlot.OxyRect clippingRectangle, double minDistSquared, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double strokeThickness = 1, OxyPlot.LineStyle lineStyle = OxyPlot.LineStyle.Solid, OxyPlot.OxyPenLineJoin lineJoin = OxyPlot.OxyPenLineJoin.Miter, bool aliased = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedPolygon(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; points, valuetype OxyPlot.OxyRect clippingRectangle, float64 minDistSquared, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 strokeThickness, valuetype OxyPlot.LineStyle lineStyle, valuetype OxyPlot.OxyPenLineJoin lineJoin, bool aliased) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="points" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="minDistSquared" Type="System.Double" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="strokeThickness" Type="System.Double" />
          <Parameter Name="lineStyle" Type="OxyPlot.LineStyle" />
          <Parameter Name="lineJoin" Type="OxyPlot.OxyPenLineJoin" />
          <Parameter Name="aliased" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="points">The points.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="minDistSquared">The squared minimum distance between points.</param>
          <param name="fill">The fill.</param>
          <param name="stroke">The stroke.</param>
          <param name="strokeThickness">The stroke thickness.</param>
          <param name="lineStyle">The line style.</param>
          <param name="lineJoin">The line join.</param>
          <param name="aliased">The aliased.</param>
          <summary>
            Draws the polygon within the specified clipping rectangle.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedPolygon(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,OxyPlot.LineStyle,OxyPlot.OxyPenLineJoin,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedRectangle">
        <MemberSignature Language="C#" Value="public static void DrawClippedRectangle (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect rect, OxyPlot.OxyRect clippingRectangle, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double thickness);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedRectangle(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect rect, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 thickness) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="rect" Type="OxyPlot.OxyRect" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="thickness" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="rect">The rectangle to draw.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="fill">The fill color.</param>
          <param name="stroke">The stroke color.</param>
          <param name="thickness">The stroke thickness.</param>
          <summary>
            Draws the clipped rectangle.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedRectangle(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedRectangleAsPolygon">
        <MemberSignature Language="C#" Value="public static void DrawClippedRectangleAsPolygon (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect rect, OxyPlot.OxyRect clippingRectangle, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double thickness);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedRectangleAsPolygon(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect rect, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 thickness) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="rect" Type="OxyPlot.OxyRect" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="thickness" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="rect">The rectangle to draw.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="fill">The fill color.</param>
          <param name="stroke">The stroke color.</param>
          <param name="thickness">The stroke thickness.</param>
          <summary>
            Draws the clipped rectangle as a polygon.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawClippedText">
        <MemberSignature Language="C#" Value="public static void DrawClippedText (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect clippingRectangle, OxyPlot.ScreenPoint p, string text, OxyPlot.OxyColor fill, string fontFamily = null, double fontSize = 10, double fontWeight = 500, double rotate = 0, OxyPlot.HorizontalAlignment horizontalAlignment = OxyPlot.HorizontalAlignment.Left, OxyPlot.VerticalAlignment verticalAlignment = OxyPlot.VerticalAlignment.Top, Nullable&lt;OxyPlot.OxySize&gt; maxSize = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawClippedText(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect clippingRectangle, valuetype OxyPlot.ScreenPoint p, string text, valuetype OxyPlot.OxyColor fill, string fontFamily, float64 fontSize, float64 fontWeight, float64 rotate, valuetype OxyPlot.HorizontalAlignment horizontalAlignment, valuetype OxyPlot.VerticalAlignment verticalAlignment, valuetype System.Nullable`1&lt;valuetype OxyPlot.OxySize&gt; maxSize) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="clippingRectangle" Type="OxyPlot.OxyRect" />
          <Parameter Name="p" Type="OxyPlot.ScreenPoint" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="fontFamily" Type="System.String" />
          <Parameter Name="fontSize" Type="System.Double" />
          <Parameter Name="fontWeight" Type="System.Double" />
          <Parameter Name="rotate" Type="System.Double" />
          <Parameter Name="horizontalAlignment" Type="OxyPlot.HorizontalAlignment" />
          <Parameter Name="verticalAlignment" Type="OxyPlot.VerticalAlignment" />
          <Parameter Name="maxSize" Type="System.Nullable&lt;OxyPlot.OxySize&gt;" />
        </Parameters>
        <Docs>
          <param name="rc">The rendering context.</param>
          <param name="clippingRectangle">The clipping rectangle.</param>
          <param name="p">The position.</param>
          <param name="text">The text.</param>
          <param name="fill">The fill color.</param>
          <param name="fontFamily">The font family.</param>
          <param name="fontSize">Size of the font.</param>
          <param name="fontWeight">The font weight.</param>
          <param name="rotate">The rotation angle.</param>
          <param name="horizontalAlignment">The horizontal align.</param>
          <param name="verticalAlignment">The vertical align.</param>
          <param name="maxSize">Size of the max.</param>
          <summary>
            Draws the clipped text.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawClippedText(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawImage">
        <MemberSignature Language="C#" Value="public static void DrawImage (this OxyPlot.IRenderContext rc, OxyPlot.OxyImage image, double x, double y, double w, double h, double opacity, bool interpolate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawImage(class OxyPlot.IRenderContext rc, class OxyPlot.OxyImage image, float64 x, float64 y, float64 w, float64 h, float64 opacity, bool interpolate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="image" Type="OxyPlot.OxyImage" />
          <Parameter Name="x" Type="System.Double" />
          <Parameter Name="y" Type="System.Double" />
          <Parameter Name="w" Type="System.Double" />
          <Parameter Name="h" Type="System.Double" />
          <Parameter Name="opacity" Type="System.Double" />
          <Parameter Name="interpolate" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="image">The image.</param>
          <param name="x">The destination X position.</param>
          <param name="y">The destination Y position.</param>
          <param name="w">The width.</param>
          <param name="h">The height.</param>
          <param name="opacity">The opacity.</param>
          <param name="interpolate">Interpolate the image if set to <c>true</c>.</param>
          <summary>
            Draws the specified image.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawImage(OxyPlot.IRenderContext,OxyPlot.OxyImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawLine">
        <MemberSignature Language="C#" Value="public static void DrawLine (this OxyPlot.IRenderContext rc, double x0, double y0, double x1, double y1, OxyPlot.OxyPen pen, bool aliased = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawLine(class OxyPlot.IRenderContext rc, float64 x0, float64 y0, float64 x1, float64 y1, class OxyPlot.OxyPen pen, bool aliased) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="x0" Type="System.Double" />
          <Parameter Name="y0" Type="System.Double" />
          <Parameter Name="x1" Type="System.Double" />
          <Parameter Name="y1" Type="System.Double" />
          <Parameter Name="pen" Type="OxyPlot.OxyPen" />
          <Parameter Name="aliased" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="x0">The x0.</param>
          <param name="y0">The y0.</param>
          <param name="x1">The x1.</param>
          <param name="y1">The y1.</param>
          <param name="pen">The pen.</param>
          <param name="aliased">Aliased line if set to <c>true</c>.</param>
          <summary>
            Draws a line specified by coordinates.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawLine(OxyPlot.IRenderContext,System.Double,System.Double,System.Double,System.Double,OxyPlot.OxyPen,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawLineSegments">
        <MemberSignature Language="C#" Value="public static void DrawLineSegments (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; points, OxyPlot.OxyPen pen, bool aliased = true);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawLineSegments(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; points, class OxyPlot.OxyPen pen, bool aliased) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="points" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="pen" Type="OxyPlot.OxyPen" />
          <Parameter Name="aliased" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="points">The points.</param>
          <param name="pen">The pen.</param>
          <param name="aliased">if set to <c>true</c> [aliased].</param>
          <summary>
            Draws the line segments.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawLineSegments(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyPen,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawMarker">
        <MemberSignature Language="C#" Value="public static void DrawMarker (this OxyPlot.IRenderContext rc, OxyPlot.ScreenPoint p, OxyPlot.OxyRect clippingRect, OxyPlot.MarkerType type, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; outline, double size, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double strokeThickness);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMarker(class OxyPlot.IRenderContext rc, valuetype OxyPlot.ScreenPoint p, valuetype OxyPlot.OxyRect clippingRect, valuetype OxyPlot.MarkerType type, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; outline, float64 size, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 strokeThickness) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="p" Type="OxyPlot.ScreenPoint" />
          <Parameter Name="clippingRect" Type="OxyPlot.OxyRect" />
          <Parameter Name="type" Type="OxyPlot.MarkerType" />
          <Parameter Name="outline" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="size" Type="System.Double" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="strokeThickness" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="p">The center point of the marker.</param>
          <param name="clippingRect">The clipping rectangle.</param>
          <param name="type">The marker type.</param>
          <param name="outline">The outline.</param>
          <param name="size">The size of the marker.</param>
          <param name="fill">The fill color.</param>
          <param name="stroke">The stroke color.</param>
          <param name="strokeThickness">The stroke thickness.</param>
          <summary>
            Renders the marker.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawMarker(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawMarkers">
        <MemberSignature Language="C#" Value="public static void DrawMarkers (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; markerPoints, OxyPlot.OxyRect clippingRect, OxyPlot.MarkerType markerType, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; markerOutline, System.Collections.Generic.IList&lt;double&gt; markerSize, OxyPlot.OxyColor markerFill, OxyPlot.OxyColor markerStroke, double markerStrokeThickness, int resolution = 0, OxyPlot.ScreenPoint binOffset = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMarkers(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; markerPoints, valuetype OxyPlot.OxyRect clippingRect, valuetype OxyPlot.MarkerType markerType, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; markerOutline, class System.Collections.Generic.IList`1&lt;float64&gt; markerSize, valuetype OxyPlot.OxyColor markerFill, valuetype OxyPlot.OxyColor markerStroke, float64 markerStrokeThickness, int32 resolution, valuetype OxyPlot.ScreenPoint binOffset) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="markerPoints" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="clippingRect" Type="OxyPlot.OxyRect" />
          <Parameter Name="markerType" Type="OxyPlot.MarkerType" />
          <Parameter Name="markerOutline" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="markerSize" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
          <Parameter Name="markerFill" Type="OxyPlot.OxyColor" />
          <Parameter Name="markerStroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="markerStrokeThickness" Type="System.Double" />
          <Parameter Name="resolution" Type="System.Int32" />
          <Parameter Name="binOffset" Type="OxyPlot.ScreenPoint" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="markerPoints">The marker points.</param>
          <param name="clippingRect">The clipping rectangle.</param>
          <param name="markerType">Type of the marker.</param>
          <param name="markerOutline">The marker outline.</param>
          <param name="markerSize">Size of the markers.</param>
          <param name="markerFill">The marker fill.</param>
          <param name="markerStroke">The marker stroke.</param>
          <param name="markerStrokeThickness">The marker stroke thickness.</param>
          <param name="resolution">The resolution.</param>
          <param name="binOffset">The bin Offset.</param>
          <summary>
            Draws a list of markers.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawMarkers(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Collections.Generic.IList{System.Double},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Int32,OxyPlot.ScreenPoint)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawMarkers">
        <MemberSignature Language="C#" Value="public static void DrawMarkers (this OxyPlot.IRenderContext rc, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; markerPoints, OxyPlot.OxyRect clippingRect, OxyPlot.MarkerType markerType, System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt; markerOutline, double markerSize, OxyPlot.OxyColor markerFill, OxyPlot.OxyColor markerStroke, double markerStrokeThickness, int resolution = 0, OxyPlot.ScreenPoint binOffset = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMarkers(class OxyPlot.IRenderContext rc, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; markerPoints, valuetype OxyPlot.OxyRect clippingRect, valuetype OxyPlot.MarkerType markerType, class System.Collections.Generic.IList`1&lt;valuetype OxyPlot.ScreenPoint&gt; markerOutline, float64 markerSize, valuetype OxyPlot.OxyColor markerFill, valuetype OxyPlot.OxyColor markerStroke, float64 markerStrokeThickness, int32 resolution, valuetype OxyPlot.ScreenPoint binOffset) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="markerPoints" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="clippingRect" Type="OxyPlot.OxyRect" />
          <Parameter Name="markerType" Type="OxyPlot.MarkerType" />
          <Parameter Name="markerOutline" Type="System.Collections.Generic.IList&lt;OxyPlot.ScreenPoint&gt;" />
          <Parameter Name="markerSize" Type="System.Double" />
          <Parameter Name="markerFill" Type="OxyPlot.OxyColor" />
          <Parameter Name="markerStroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="markerStrokeThickness" Type="System.Double" />
          <Parameter Name="resolution" Type="System.Int32" />
          <Parameter Name="binOffset" Type="OxyPlot.ScreenPoint" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="markerPoints">The marker points.</param>
          <param name="clippingRect">The clipping rectangle.</param>
          <param name="markerType">Type of the marker.</param>
          <param name="markerOutline">The marker outline.</param>
          <param name="markerSize">Size of the marker.</param>
          <param name="markerFill">The marker fill.</param>
          <param name="markerStroke">The marker stroke.</param>
          <param name="markerStrokeThickness">The marker stroke thickness.</param>
          <param name="resolution">The resolution.</param>
          <param name="binOffset">The bin Offset.</param>
          <summary>
            Draws a list of markers.
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawMarkers(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Int32,OxyPlot.ScreenPoint)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawRectangleAsPolygon">
        <MemberSignature Language="C#" Value="public static void DrawRectangleAsPolygon (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect rect, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, OxyPlot.OxyThickness thickness);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawRectangleAsPolygon(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect rect, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, valuetype OxyPlot.OxyThickness thickness) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="rect" Type="OxyPlot.OxyRect" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="thickness" Type="OxyPlot.OxyThickness" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="rect">The rectangle.</param>
          <param name="fill">The fill.</param>
          <param name="stroke">The stroke.</param>
          <param name="thickness">The thickness.</param>
          <summary>
            Draws the rectangle as an aliased polygon.
            (makes sure pixel alignment is the same as for lines)
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,OxyPlot.OxyThickness)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.IRenderContext" />
      </Targets>
      <Member MemberName="DrawRectangleAsPolygon">
        <MemberSignature Language="C#" Value="public static void DrawRectangleAsPolygon (this OxyPlot.IRenderContext rc, OxyPlot.OxyRect rect, OxyPlot.OxyColor fill, OxyPlot.OxyColor stroke, double thickness);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawRectangleAsPolygon(class OxyPlot.IRenderContext rc, valuetype OxyPlot.OxyRect rect, valuetype OxyPlot.OxyColor fill, valuetype OxyPlot.OxyColor stroke, float64 thickness) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rc" Type="OxyPlot.IRenderContext" RefType="this" />
          <Parameter Name="rect" Type="OxyPlot.OxyRect" />
          <Parameter Name="fill" Type="OxyPlot.OxyColor" />
          <Parameter Name="stroke" Type="OxyPlot.OxyColor" />
          <Parameter Name="thickness" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rc">The render context.</param>
          <param name="rect">The rectangle.</param>
          <param name="fill">The fill.</param>
          <param name="stroke">The stroke.</param>
          <param name="thickness">The thickness.</param>
          <summary>
            Draws the rectangle as an aliased polygon.
            (makes sure pixel alignment is the same as for lines)
            </summary>
        </Docs>
        <Link Type="OxyPlot.RenderingExtensions" Member="M:OxyPlot.RenderingExtensions.DrawRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Repeat">
        <MemberSignature Language="C#" Value="public static string Repeat (this string source, int n);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Repeat(string source, int32 n) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.String" RefType="this" />
          <Parameter Name="n" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="source">The source.</param>
          <param name="n">The number of times to repeat.</param>
          <summary>
            Repeats the specified string <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="OxyPlot.Reporting.StringExtensions" Member="M:OxyPlot.Reporting.StringExtensions.Repeat(System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="SplitLines">
        <MemberSignature Language="C#" Value="public static string[] SplitLines (this string s, int lineLength = 80);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] SplitLines(string s, int32 lineLength) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="s" Type="System.String" RefType="this" />
          <Parameter Name="lineLength" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="s">The string to split.</param>
          <param name="lineLength">The line length.</param>
          <summary>
            Splits the specified string to lines of maximum <paramref name="lineLength" /> length.
            </summary>
        </Docs>
        <Link Type="OxyPlot.Reporting.StringExtensions" Member="M:OxyPlot.Reporting.StringExtensions.SplitLines(System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="CopyTo">
        <MemberSignature Language="C#" Value="public static void CopyTo (this System.IO.Stream input, System.IO.Stream output);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo(class System.IO.Stream input, class System.IO.Stream output) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="output" Type="System.IO.Stream" />
        </Parameters>
        <Docs>
          <param name="input">The input stream.</param>
          <param name="output">The output stream.</param>
          <summary>
            Copies to the specified stream.
            </summary>
        </Docs>
        <Link Type="OxyPlot.StreamExtensions" Member="M:OxyPlot.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Android.Views.Keycode" />
      </Targets>
      <Member MemberName="Convert">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyKey Convert (this Android.Views.Keycode keyCode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyKey Convert(valuetype Android.Views.Keycode keyCode) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyKey</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyCode" Type="Android.Views.Keycode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="keyCode">The key code.</param>
          <summary>
            Converts an <see cref="T:Android.Views.Keycode" /> to a <see cref="T:OxyPlot.OxyKey" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.Convert(Android.Views.Keycode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyPenLineJoin" />
      </Targets>
      <Member MemberName="Convert">
        <MemberSignature Language="C#" Value="public static Android.Graphics.Paint.Join Convert (this OxyPlot.OxyPenLineJoin join);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Graphics.Paint/Join Convert(valuetype OxyPlot.OxyPenLineJoin join) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Android.Graphics.Paint+Join</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="join" Type="OxyPlot.OxyPenLineJoin" RefType="this" />
        </Parameters>
        <Docs>
          <param name="join">The join value to convert.</param>
          <summary>
            Converts an <see cref="T:OxyPlot.OxyPenLineJoin" /> to a <see cref="T:Android.Graphics.Paint.Join" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.Convert(OxyPlot.OxyPenLineJoin)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Android.Views.KeyEvent" />
      </Targets>
      <Member MemberName="GetModifierKeys">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyModifierKeys GetModifierKeys (this Android.Views.KeyEvent e);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.OxyModifierKeys GetModifierKeys(class Android.Views.KeyEvent e) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyModifierKeys</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="e" Type="Android.Views.KeyEvent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="e">The key event arguments.</param>
          <summary>
            Gets the <see cref="T:OxyPlot.OxyModifierKeys" /> from a <see cref="T:Android.Views.KeyEvent" /> .
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.GetModifierKeys(Android.Views.KeyEvent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Android.Views.MotionEvent" />
      </Targets>
      <Member MemberName="GetTouchPoints">
        <MemberSignature Language="C#" Value="public static OxyPlot.ScreenPoint[] GetTouchPoints (this Android.Views.MotionEvent e, double scale);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.ScreenPoint[] GetTouchPoints(class Android.Views.MotionEvent e, float64 scale) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.ScreenPoint[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="e" Type="Android.Views.MotionEvent" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="e">The event arguments.</param>
          <param name="scale">The resolution scale factor.</param>
          <summary>
            Gets the touch points from the specified <see cref="T:Android.Views.MotionEvent" /> argument.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.GetTouchPoints(Android.Views.MotionEvent,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToColor">
        <MemberSignature Language="C#" Value="public static Android.Graphics.Color ToColor (this OxyPlot.OxyColor color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Android.Graphics.Color ToColor(valuetype OxyPlot.OxyColor color) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Android.Graphics.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The color to convert.</param>
          <summary>
            Converts an <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:Android.Graphics.Color" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.ToColor(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Android.Views.KeyEvent" />
      </Targets>
      <Member MemberName="ToKeyEventArgs">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyKeyEventArgs ToKeyEventArgs (this Android.Views.KeyEvent e);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class OxyPlot.OxyKeyEventArgs ToKeyEventArgs(class Android.Views.KeyEvent e) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyKeyEventArgs</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="e" Type="Android.Views.KeyEvent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="e">The event arguments.</param>
          <summary>
            Converts an <see cref="T:Android.Views.KeyEvent" /> to a <see cref="T:OxyPlot.OxyKeyEventArgs" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.ToKeyEventArgs(Android.Views.KeyEvent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyRect" />
      </Targets>
      <Member MemberName="ToRectF">
        <MemberSignature Language="C#" Value="public static Android.Graphics.RectF ToRectF (this OxyPlot.OxyRect rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Graphics.RectF ToRectF(valuetype OxyPlot.OxyRect rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Android.Graphics.RectF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rect" Type="OxyPlot.OxyRect" RefType="this" />
        </Parameters>
        <Docs>
          <param name="rect">The rectangle to convert.</param>
          <summary>
            Converts an <see cref="T:OxyPlot.OxyRect" /> to a <see cref="T:Android.Graphics.RectF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.ToRectF(OxyPlot.OxyRect)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyRect" />
      </Targets>
      <Member MemberName="ToRectF">
        <MemberSignature Language="C#" Value="public static Android.Graphics.RectF ToRectF (this OxyPlot.OxyRect rect, double scale);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Graphics.RectF ToRectF(valuetype OxyPlot.OxyRect rect, float64 scale) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Android.Graphics.RectF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rect" Type="OxyPlot.OxyRect" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="rect">The rectangle to convert.</param>
          <param name="scale">The scaling factor.</param>
          <summary>
            Converts a scaled <see cref="T:OxyPlot.OxyRect" /> to a <see cref="T:Android.Graphics.RectF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.ToRectF(OxyPlot.OxyRect,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Android.Views.MotionEvent" />
      </Targets>
      <Member MemberName="ToTouchEventArgs">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyTouchEventArgs ToTouchEventArgs (this Android.Views.MotionEvent e, double scale);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class OxyPlot.OxyTouchEventArgs ToTouchEventArgs(class Android.Views.MotionEvent e, float64 scale) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyTouchEventArgs</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="e" Type="Android.Views.MotionEvent" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="e">The event arguments.</param>
          <param name="scale">The resolution scale factor.</param>
          <summary>
            Converts an <see cref="T:Android.Views.MotionEvent" /> to a <see cref="T:OxyPlot.OxyTouchEventArgs" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinAndroid.ExtensionMethods" Member="M:OxyPlot.XamarinAndroid.ExtensionMethods.ToTouchEventArgs(Android.Views.MotionEvent,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyPenLineJoin" />
      </Targets>
      <Member MemberName="Convert">
        <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGLineJoin Convert (this OxyPlot.OxyPenLineJoin lineJoin);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGLineJoin Convert(valuetype OxyPlot.OxyPenLineJoin lineJoin) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.CoreGraphics.CGLineJoin</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="lineJoin" Type="OxyPlot.OxyPenLineJoin" RefType="this" />
        </Parameters>
        <Docs>
          <param name="lineJoin">The line join.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.OxyPenLineJoin" /> to a <see cref="T:MonoTouch.CoreGraphics.CGLineCap" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.Convert(OxyPlot.OxyPenLineJoin)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyRect" />
      </Targets>
      <Member MemberName="Convert">
        <MemberSignature Language="C#" Value="public static System.Drawing.RectangleF Convert (this OxyPlot.OxyRect rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.RectangleF Convert(valuetype OxyPlot.OxyRect rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Drawing.RectangleF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rect" Type="OxyPlot.OxyRect" RefType="this" />
        </Parameters>
        <Docs>
          <param name="rect">The rectangle to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.OxyRect" /> to a <see cref="T:System.Drawing.RectangleF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.Convert(OxyPlot.OxyRect)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.ScreenPoint" />
      </Targets>
      <Member MemberName="Convert">
        <MemberSignature Language="C#" Value="public static System.Drawing.PointF Convert (this OxyPlot.ScreenPoint p);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.PointF Convert(valuetype OxyPlot.ScreenPoint p) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Drawing.PointF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="p" Type="OxyPlot.ScreenPoint" RefType="this" />
        </Parameters>
        <Docs>
          <param name="p">The point to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.ScreenPoint" /> to a <see cref="T:System.Drawing.PointF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.Convert(OxyPlot.ScreenPoint)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyRect" />
      </Targets>
      <Member MemberName="ConvertAliased">
        <MemberSignature Language="C#" Value="public static System.Drawing.RectangleF ConvertAliased (this OxyPlot.OxyRect rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.RectangleF ConvertAliased(valuetype OxyPlot.OxyRect rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Drawing.RectangleF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="rect" Type="OxyPlot.OxyRect" RefType="this" />
        </Parameters>
        <Docs>
          <param name="rect">The rectangle to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.OxyRect" /> to a pixel center aligned <see cref="T:System.Drawing.RectangleF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ConvertAliased(OxyPlot.OxyRect)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.ScreenPoint" />
      </Targets>
      <Member MemberName="ConvertAliased">
        <MemberSignature Language="C#" Value="public static System.Drawing.PointF ConvertAliased (this OxyPlot.ScreenPoint p);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.PointF ConvertAliased(valuetype OxyPlot.ScreenPoint p) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Drawing.PointF</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="p" Type="OxyPlot.ScreenPoint" RefType="this" />
        </Parameters>
        <Docs>
          <param name="p">The point to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.ScreenPoint" /> to a pixel center aligned <see cref="T:System.Drawing.PointF" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ConvertAliased(OxyPlot.ScreenPoint)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToCGColor">
        <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGColor ToCGColor (this OxyPlot.OxyColor c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreGraphics.CGColor ToCGColor(valuetype OxyPlot.OxyColor c) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.CoreGraphics.CGColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="c" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="c">The color to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:MonoTouch.CoreGraphics.CGColor" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ToCGColor(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Drawing.PointF" />
      </Targets>
      <Member MemberName="ToScreenPoint">
        <MemberSignature Language="C#" Value="public static OxyPlot.ScreenPoint ToScreenPoint (this System.Drawing.PointF p);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype OxyPlot.ScreenPoint ToScreenPoint(valuetype System.Drawing.PointF p) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.ScreenPoint</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="p" Type="System.Drawing.PointF" RefType="this" />
        </Parameters>
        <Docs>
          <param name="p">The point to convert.</param>
          <summary>
            Converts a <see cref="T:System.Drawing.PointF" /> to a <see cref="T:OxyPlot.ScreenPoint" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ToScreenPoint(System.Drawing.PointF)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:MonoTouch.UIKit.UITouch" />
      </Targets>
      <Member MemberName="ToTouchEventArgs">
        <MemberSignature Language="C#" Value="public static OxyPlot.OxyTouchEventArgs ToTouchEventArgs (this MonoTouch.UIKit.UITouch touch, MonoTouch.UIKit.UIView view);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class OxyPlot.OxyTouchEventArgs ToTouchEventArgs(class MonoTouch.UIKit.UITouch touch, class MonoTouch.UIKit.UIView view) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>OxyPlot.OxyTouchEventArgs</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="touch" Type="MonoTouch.UIKit.UITouch" RefType="this" />
          <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        </Parameters>
        <Docs>
          <param name="touch">The touch event arguments.</param>
          <param name="view">The view.</param>
          <summary>
            Converts <see cref="T:MonoTouch.UIKit.UITouch" /> event arguments to <see cref="T:OxyPlot.OxyTouchEventArgs" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ToTouchEventArgs(MonoTouch.UIKit.UITouch,MonoTouch.UIKit.UIView)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:OxyPlot.OxyColor" />
      </Targets>
      <Member MemberName="ToUIColor">
        <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor ToUIColor (this OxyPlot.OxyColor c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor ToUIColor(valuetype OxyPlot.OxyColor c) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="c" Type="OxyPlot.OxyColor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="c">The color to convert.</param>
          <summary>
            Converts a <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:MonoTouch.UIKit.UIColor" />.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ConverterExtensions" Member="M:OxyPlot.XamarinIOS.ConverterExtensions.ToUIColor(OxyPlot.OxyColor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:MonoTouch.UIKit.UIView" />
      </Targets>
      <Member MemberName="GetImage">
        <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage GetImage (this MonoTouch.UIKit.UIView view, System.Drawing.RectangleF rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage GetImage(class MonoTouch.UIKit.UIView view, valuetype System.Drawing.RectangleF rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="MonoTouch.UIKit.UIView" RefType="this" />
          <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        </Parameters>
        <Docs>
          <param name="view">The view.</param>
          <param name="rect">The rectangle.</param>
          <summary>
            Gets the image for the specified <see cref="T:MonoTouch.UIKit.UIView" /> .
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ExportExtensions" Member="M:OxyPlot.XamarinIOS.ExportExtensions.GetImage(MonoTouch.UIKit.UIView,System.Drawing.RectangleF)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:MonoTouch.UIKit.UIView" />
      </Targets>
      <Member MemberName="ToPdf">
        <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSData ToPdf (this MonoTouch.UIKit.UIView view, System.Drawing.RectangleF rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSData ToPdf(class MonoTouch.UIKit.UIView view, valuetype System.Drawing.RectangleF rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="MonoTouch.UIKit.UIView" RefType="this" />
          <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        </Parameters>
        <Docs>
          <param name="view">The view to export.</param>
          <param name="rect">The rectangle to export.</param>
          <summary>
            Exports the specified <see cref="T:MonoTouch.UIKit.UIView" /> to a PDF file.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ExportExtensions" Member="M:OxyPlot.XamarinIOS.ExportExtensions.ToPdf(MonoTouch.UIKit.UIView,System.Drawing.RectangleF)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:MonoTouch.UIKit.UIView" />
      </Targets>
      <Member MemberName="ToPng">
        <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSData ToPng (this MonoTouch.UIKit.UIView view, System.Drawing.RectangleF rect);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSData ToPng(class MonoTouch.UIKit.UIView view, valuetype System.Drawing.RectangleF rect) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="MonoTouch.UIKit.UIView" RefType="this" />
          <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        </Parameters>
        <Docs>
          <param name="view">The view to export.</param>
          <param name="rect">The rectangle to export.</param>
          <summary>
            Stores the specified <see cref="T:MonoTouch.UIKit.UIView" /> to a PNG file.
            </summary>
        </Docs>
        <Link Type="OxyPlot.XamarinIOS.ExportExtensions" Member="M:OxyPlot.XamarinIOS.ExportExtensions.ToPng(MonoTouch.UIKit.UIView,System.Drawing.RectangleF)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
