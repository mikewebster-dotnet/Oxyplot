<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyEditor</name>
    </assembly>
    <members>
        <member name="M:PropertyEditorLibrary.IPropertyViewModelFactory.CreateViewModel(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Create a PropertyViewModel for the given property.
            The ViewModel could be populated with data from local attributes.
            </summary>
            <param name="instance"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.DefaultPropertyViewModelFactory.#ctor(PropertyEditorLibrary.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyEditorLibrary.DefaultPropertyViewModelFactory"/> class.
            </summary>
            <param name="owner">The owner PropertyEditor of the factory. 
            This is neccessary in order to get the PropertyTemplateSelector to work.</param>
        </member>
        <member name="P:PropertyEditorLibrary.DefaultPropertyViewModelFactory.IsEnabledPattern">
            <summary>
            Gets or sets the IsEnabledPattern.
            
            Example using a "Is{0}Enabled" pattern:
              string City { get; set; }
              bool IsCityEnabled { get; set; }
            The state of the City property will be controlled by the IsCityEnabled property
            </summary>
            <value>The IsEnabledPattern.</value>
        </member>
        <member name="P:PropertyEditorLibrary.DefaultPropertyViewModelFactory.IsVisiblePattern">
            <summary>
            Gets or sets the IsVisiblePattern.
            
            Example using a "Is{0}Visible" pattern:
              string City { get; set; }
              bool IsCityVisible { get; set; }
            The visibility state of the City property will be controlled by the IsCityVisible property
            </summary>
            <value>The IsVisiblePattern.</value>
        </member>
        <member name="P:PropertyEditorLibrary.DefaultPropertyViewModelFactory.UsePropertyPattern">
            <summary>
            Gets or sets the UsePattern. This is used to create an "Optional" property.
            
            Example using a "Use{0}" pattern:
              string City { get; set; }
              bool UseCity { get; set; }
            The optional state of the City property will be controlled by the UseCity property
            </summary>
            <value>The IsEnabledPattern.</value>
        </member>
        <member name="T:PropertyEditorLibrary.PropertyDialog">
            <summary>
            Automatic Property Dialog
            Set the DataContext of the Dialog to the instance you want to edit.
            TODO: cancel/commit values
            </summary>
            <summary>
            PropertyDialog
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyDialog.GetFieldValues(System.Object)">
            <summary>
            This is used to clone the object.  
            Override the method to provide a more efficient clone.  
            The default implementation simply reflects across 
            the object copying every field.
            </summary>
            <returns>Clone of current object</returns>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyDialog.RestoreFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This restores the state of the current object from the passed clone object.
            </summary>
            <param name="fieldValues">Object to restore state from</param>
            <param name="obj"></param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.ColorToBrushConverter">
            <summary>
            Color to Brush value converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.CategoryViewModel">
            <summary>
            ViewModel for categories.
            The categories can be shown as GroupBox, Expander or by the Header.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.ViewModelBase">
            <summary>
            Base class for tabs, categories and properties 
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.IPropertyStateUpdater">
            <summary>
            Implement this interface on your model class to be able to updates the 
            property enabled/visible states of the properties. 
            This update method is called after every property change of the same instance.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.ColorToHexConverter">
            <summary>
            Color to Hex string value converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.WizardDialog">
            <summary>
            Wizard dialog
            Todo: Win7 style
            </summary>
            <summary>
            WizardDialog
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.WizardDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.DirectoryPicker">
            <summary>
            DirectoryPicker control
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.DirectoryPicker.DirectoryProperty">
            <summary>
            The directory property.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.DirectoryPicker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyEditorLibrary.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.DirectoryPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyEditorLibrary.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.DirectoryPicker.Browse">
            <summary>
            The browse.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.DirectoryPicker.Directory">
            <summary>
            Gets or sets Directory.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.DirectoryPicker.BrowseCommand">
            <summary>
            Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.DirectoryPicker.DirectoryDialog">
            <summary>
            Gets or sets DirectoryDialog.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.IDirectoryDialog">
            <summary>
            The i directory dialog.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.IDirectoryDialog.Show">
            <summary>
            The show.
            </summary>
            <returns>
            The show.
            </returns>
        </member>
        <member name="P:PropertyEditorLibrary.IDirectoryDialog.Directory">
            <summary>
            Gets or sets Directory.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.PropertyEditor">
            <summary>
            PropertyEditor control.
            Set the SelectedObject to define the contents of the control.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.PropertyEditor.propertyMap">
            <summary>
            The PropertyMap dictionary contains a map of all Properties of the current object being edited.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.RaisePropertyChangedEvent(System.String,System.Object,System.Object)">
            <summary>
            Invoke this method to raise a PropertyChanged event
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.UpdateContent">
            <summary>
            Updates the content of the control
            (after initialization and SelectedObject changes)
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.CreatePropertyModel(System.Object,System.Boolean)">
            <summary>
            This method takes an object Instance and creates the property model.
            The properties are organized in a hierarchy
            PropertyTab
              PropertyCategory
                Property|OptionalProperty|WideProperty|CheckBoxProperty
            </summary>
            <param name="instance"></param>
            <param name="isEnumerable"></param>
            <returns>Collection of tab ViewModels</returns>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.ParseTabAndCategory(System.ComponentModel.PropertyDescriptor,System.String@,System.String@)">
            <summary>
            If a CategoryAttributes is given as
            [Category("TabA|GroupB")]
            this will be parsed into tabName="TabA" and categoryName="GroupB"
            
            If the CategoryAttribute is
            [Category("GroupC")]
            the method will not change tabName, but set categoryName="GroupC"
            </summary>
            <param name="descriptor"></param>
            <param name="tabName"></param>
            <param name="categoryName"></param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.LocalizePropertyHeader(System.Type,PropertyEditorLibrary.PropertyViewModel)">
            <summary>
            Updates the property header and tooltip
            </summary>
            <param name="instanceType">Type of the object being edited</param>
            <param name="propertyViewModel">The property viewmodel</param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.LocalizeCategoryHeader(System.Type,PropertyEditorLibrary.CategoryViewModel)">
            <summary>
            Updates the category (expander/groupbox) header and tooltip
            </summary>
            <param name="instanceType"></param>
            <param name="categoryViewModel"></param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.LocalizeTabHeader(System.Type,PropertyEditorLibrary.TabViewModel)">
            <summary>
            Updates the tab header and tooltip
            </summary>
            <param name="instanceType"></param>
            <param name="tabViewModel"></param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyEditor.UpdateOptionalProperties(PropertyEditorLibrary.PropertyViewModel)">
            <summary>
            Update IsEnabled on properties marked [Optional(..)]
            </summary>
            <param name="propertyViewModel"></param>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.PropertyViewModelFactory">
            <summary>
            Gets or sets the property view model factory.
            This factory is used to generate the view model based on the property descriptors.
            You can override this factory to create the view model based on your own attributes.
            </summary>
            <value>The property view model factory.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.Editors">
            <summary>
            Collection of custom editors
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.LabelWidth">
            <summary>
            The width of the property labels
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.ShowReadOnlyProperties">
            <summary>
            Show read-only properties.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.ShowTabs">
            <summary>
            Organize the properties in tabs.
            You should use the [Category("Tabname|Groupname")] attribute to define the tabs.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.DeclaredOnly">
            <summary>
            Show only declared properties (not inherited properties).
            Specifies that only members declared at the level of the supplied type's hierarchy 
            should be considered. Inherited members are not considered.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.ShowBoolHeader">
            <summary>
            Show enum properties as ComboBox or RadioButtonList.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.ShowEnumAsComboBox">
            <summary>
            Show enum properties as ComboBox or RadioButtonList.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.LabelAlignment">
            <summary>
            Gets or sets the alignment of property labels.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.LocalizationService">
            <summary>
            Implement the LocalizationService to translate the tab, category and property strings and tooltips
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.ImageProvider">
            <summary>
            The ImageProvider can be used to provide images to the Tab icons.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.RequiredAttribute">
            <summary>
            Gets or sets the required attribute type.
            If the required attribute type is set, only properties where this attribute is set will be shown.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.PropertyTemplateSelector">
            <summary>
            The PropertyTemplateSelector is used to select the DataTemplate for each PropertyViewModel
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyEditor.CategoryTemplateSelector">
            <summary>
            The CategoryTemplateSelector is used to select the DataTemplate for the CategoryViewModels
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.PropertyValueChangedEventArgs">
            <summary>
            Event args for the PropertyValueChanged event
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.BrushToColorConverter">
            <summary>
            Brush to Color value converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.ColorPicker">
            <summary>
            ColorPicker control
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.ColorPicker.ShowAsHex">
            <summary>
            Gets or sets a value indicating whether show as color names as hex strings.
            </summary>
            <value><c>true</c> if show as hex; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyEditorLibrary.ColorPicker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the color picker popup is open.
            </summary>
            <value>
            	<c>true</c> if this popup is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.ColorPicker.IsPicking">
            <summary>
            Gets or sets if picking colors from the screen is active.
            Use the 'SHIFT' button to select colors when this mode is active.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="T:PropertyEditorLibrary.AboutDialog">
            <summary>
            A basic About Dialog (inspired by Google)
            </summary>
            <summary>
            AboutDialog
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.AboutDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.AboutDialog.Image">
            <summary>
            Sets the image used in the about dialog.
            Example:
             d.Image = new BitmapImage(new Uri(@"pack://application:,,,/AssemblyName;component/Images/about.png"));           
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:PropertyEditorLibrary.AboutDialog.UpdateStatus">
            <summary>
            Sets the update status.
            </summary>
            <value>The update status.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PropertyEditorLibrary.DockPanelSplitter" -->
        <member name="M:PropertyEditorLibrary.DockPanelSplitter.UpdateTargetElement">
            <summary>
            Update the target element (the element the DockPanelSplitter works on)
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.DockPanelSplitter.ProportionalResize">
            <summary>
            Resize the target element proportionally with the parent container
            Set to false if you don't want the element to be resized when the parent is resized.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.DockPanelSplitter.Thickness">
            <summary>
            Height or width of splitter, depends of orientation of the splitter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.WidePropertyViewModel">
            <summary>
            Properties marked [WideProperty] are using the full width of the control
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.PropertyViewModel">
            <summary>
            The Property ViewModel
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyEditorLibrary.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyEditorLibrary.PropertyViewModel"/> class.
            </summary>
            <param name="instance">The instance being edited</param>
            <param name="descriptor">The property descriptor</param>
            <param name="owner">The parent PropertyEditor</param>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.SubscribeValueChanged">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.UnsubscribeValueChanged">
            <summary>
            Unsubscribes the value changed event.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.SubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.UnsubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Unsubscribes the value changed event.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.GetValueFromEnumerable(System.Collections.IEnumerable)">
            <summary>
            The the current value from an IEnumerable instance
            </summary>
            <param name="componentList"></param>
            <returns>If all components in the enumerable are equal, it returns the value.
            If values are different, it returns null.</returns>
        </member>
        <member name="M:PropertyEditorLibrary.PropertyViewModel.UpdateErrorInfo">
            <summary>
            Updates the error/warning properties.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Height">
            <summary>
            Gets or sets the height of the editor for the property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether the property should be edited as multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.TextWrapping">
            <summary>
            Gets or sets the text wrapping for multiline strings.
            </summary>
            <value>The text wrapping mode.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsEnumerable">
            <summary>
            Gets or sets a value indicating whether this instance is enumerable.
            </summary>
            <value>
            	<c>true</c> if this instance is enumerable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.PropertyTemplateSelector">
            <summary>
            Gets the property template selector.
            </summary>
            <value>The property template selector.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Descriptor">
            <summary>
            Gets or sets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsEnabledDescriptor">
            <summary>
            Gets or sets the descriptor for the property's IsEnabled.
            </summary>
            <value>The is enabled descriptor.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this property is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsVisibleDescriptor">
            <summary>
            Gets or sets the descriptor for the property's IsVisible.
            </summary>
            <value>The is Visible descriptor.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsVisible">
            <summary>
            Gets or sets a value indicating whether this property is Visible.
            </summary>
            <value>
            	<c>true</c> if this instance is Visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.PropertyError">
            <summary>
            Gets the property error.
            </summary>
            <value>The property error.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.PropertyWarning">
            <summary>
            Gets the property warning.
            </summary>
            <value>The property warning.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Visibility">
            <summary>
            Gets the visibility of the property.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.FirstInstance">
            <summary>
            Gets the first instance if the Instance is an Enumerable, otherwise return the Instance.
            </summary>
            <value>The first instance.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Instances">
            <summary>
            Gets the instances or a single Instance as an Enumerable.
            </summary>
            <value>The instances.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsWriteable">
            <summary>
            Gets a value indicating whether this instance is writeable.
            </summary>
            <value>
            	<c>true</c> if this instance is writeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PropertyEditorLibrary.PropertyViewModel.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PropertyEditorLibrary.SlidablePropertyViewModel">
            <summary>
            Properties marked [Slidable] are using a slider
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.OptionalPropertyViewModel">
            <summary>
            Properties that are nullable or marked [Optional(...)] are enabled/disabled by a checkbox
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.TypeHelper.FindBiggestCommonType(System.Collections.IEnumerable)">
            <summary>
            Finds the biggest common type of items in the list.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog">
            <summary>
            Represents a common dialog box (Win32::SHBrowseForFolder()) that allows a user to select a folder.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.browseInfo">
            <summary>
            The browse info.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog"/> class. 
            Constructs a BrowseForFolderDialog with default BrowseInfoFlags set to BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.ShowDialog">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()).
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.ShowDialog(System.Windows.Window)">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()) with its hwndOwner set to the handle of 'owner'.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.PInvokeSHBrowseForFolder(System.Windows.Window)">
            <summary>
            The p invoke sh browse for folder.
            </summary>
            <param name="owner">
            The owner.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseEventHandler(System.IntPtr,PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser,System.IntPtr,System.IntPtr)">
            <summary>
            The browse event handler.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
            <returns>
            The browse event handler.
            </returns>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.SHBrowseForFolderW(PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW)">
            <summary>
            The sh browse for folder w.
            </summary>
            <param name="bi">
            The bi.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            The sh get path from id list.
            </summary>
            <param name="pidl">
            The pidl.
            </param>
            <param name="path">
            The path.
            </param>
            <returns>
            The sh get path from id list.
            </returns>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="Msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser,System.IntPtr,System.String)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="str">
            The str.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.SelectedFolder">
            <summary>
            Gets the current and or final selected folder path.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.Title">
            <summary>
            Gets or sets the string that is displayed above the tree view control in the dialog box (must set BEFORE calling ShowDialog()). 
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.InitialFolder">
            <summary>
            Gets or sets the initially selected folder path.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.InitialExpandedFolder">
            <summary>
            Gets or sets the initially selected and expanded folder path.  Overrides SelectedFolder.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.OKButtonText">
            <summary>
            Gets or sets the text for the dialog's OK button.
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfo">
            <summary>
            Provides direct access to the Win32::SHBrowseForFolder() BROWSEINFO structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowserDialogFlags">
            <summary>
            Provides direct access to the ulFlags field of the Win32::SHBrowseForFolder() structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseCallbackProc">
            <summary>
            The browse callback proc.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags">
            <summary>
            The browse info flags.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_None">
            <summary>
            No specified BIF_xxx flags.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNONLYFSDIRS">
            <summary>
            Only return file system directories. If the user selects folders that are not part of the file system, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_DONTGOBELOWDOMAIN">
            <summary>
            Do not include network folders below the domain level in the dialog box's tree view control.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_STATUSTEXT">
            <summary>
            Include a status area in the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNFSANCESTORS">
            <summary>
            Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_EDITBOX">
            <summary>
            Include an edit control in the browse dialog box that allows the user to type the name of an item.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_VALIDATE">
            <summary>
            If the user types an invalid name into the edit box, the browse dialog box will call the application's BrowseCallbackProc with the BFFM_VALIDATEFAILED message. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NEWDIALOGSTYLE">
            <summary>
            Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_USENEWUI">
            <summary>
            Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEURLS">
            <summary>
            The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_UAHINT">
            <summary>
            When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box in place of the edit box.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NONEWFOLDERBUTTON">
            <summary>
            Do not include the New Folder button in the browse dialog box.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NOTRANSLATETARGETS">
            <summary>
            When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORCOMPUTER">
            <summary>
            Only return computers. If the user selects anything other than a computer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORPRINTER">
            <summary>
            Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEFILES">
            <summary>
            The browse dialog box will display files as well as folders.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_SHAREABLE">
            <summary>
            The browse dialog box can display shareable resources on remote systems. 
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser">
            <summary>
            The message from browser.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_INITIALIZED">
            <summary>
            The dialog box has finished initializing.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_SELCHANGED">
            <summary>
            The selection has changed in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDA">
            <summary>
            (ANSI) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDW">
            <summary>
            (Unicode) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_IUNKNOWN">
            <summary>
            An IUnknown interface is available to the dialog box.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser">
            <summary>
            The message to browser.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.WM_USER">
            <summary>
            Win32 API macro - start of user defined window message range.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTA">
            <summary>
            (ANSI) Sets the status text. Set lpData to point to a null-terminated string with the desired text. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_ENABLEOK">
            <summary>
            Enables or disables the dialog box's OK button.  lParam - To enable, set to a nonzero value. To disable, set to zero.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONA">
            <summary>
            (ANSI) Specifies the path of a folder to select. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONW">
            <summary>
            (Unicode) Specifies the path of a folder to select. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTW">
            <summary>
            (Unicode) Sets the status text. Set lpData to point to a null-terminated string with the desired text. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETOKTEXT">
            <summary>
            Sets the text that is displayed on the dialog box's OK button.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETEXPANDED">
            <summary>
            Specifies the path of a folder to expand in the Browse dialog box. 
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW">
            <summary>
            The browseinfow.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.hwndOwner">
            <summary>
            A handle to the owner window for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.pidlRoot">
            <summary>
            A pointer to an item identifier list (PIDL) specifying the location of the root folder from which to start browsing. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.pszDisplayName">
            <summary>
            The address of a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH characters.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpszTitle">
            <summary>
            The address of a null-terminated string that is displayed above the tree view control in the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.ulFlags">
            <summary>
            Flags specifying the options for the dialog box. 
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpfn">
            <summary>
            A BrowseCallbackProc delegate that the dialog box calls when an event occurs.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.lParam">
            <summary>
            An application-defined value that the dialog box passes to the BrowseCallbackProc delegate, if one is specified.
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.Shell32.BrowseForFolderDialog.BROWSEINFOW.iImage">
            <summary>
            A variable to receive the image associated with the selected folder. The image is specified as an index to the system image list.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.EnumToBooleanConverter">
            <summary>
            Enum to Boolean converter
            Usage 'Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static value...}'
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.NullToBoolConverter">
            <summary>
            Null to bool value converter
            </summary>
        </member>
        <member name="P:PropertyEditorLibrary.NullToBoolConverter.NullValue">
            <summary>
            Gets or sets the value returned when the source value is null.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.DoubleToGridLengthConverter">
            <summary>
            GridLength to double value converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.CaptureScreenshot">
            <summary>
            Captures screenshot using WINAPI.
            http://stackoverflow.com/questions/1736287/capturing-a-window-with-wpf
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.CaptureScreenshot.Capture(System.Windows.Rect)">
            <summary>
            Capture the screenshot.
            <param name="area">Area of screenshot.</param>
            <returns>Bitmap source that can be used e.g. as background.</returns>
            </summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:PropertyEditorLibrary.CaptureScreenshot.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="T:PropertyEditorLibrary.BoolToVisibilityConverter">
            <summary>
            Bool to Visibility value converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.SlidableAttribute">
            <summary>
            The [Slidable] attribute is used for numeric properties.
            Properties marked with [Slidable] will have a slider next to its editor.
            Example usage:
              [Slidable(0,100)]
              [Slidable(0,100,1,10)]
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.TabViewModel">
            <summary>
            ViewModel for the tabs.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.IImageProvider">
            <summary>
            Provides images for PropertyEditor tab icons.
            Used in PropertyEditor.ImageProvider
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.IImageProvider.GetImage(System.Type,System.String)">
            <summary>
            Return the image 
            </summary>
            <param name="type">Type of the instance being edited</param>
            <param name="key">Tab name/key</param>
            <returns></returns>
        </member>
        <member name="T:PropertyEditorLibrary.ColorHelper">
            <summary>
            Static <see cref="T:System.Windows.Media.Color"/> helper methods.
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Change the alpha value of a color
            </summary>
            <param name="c"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.Interpolate(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c0"></param>
            <param name="c1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ColorToHex(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to a hexadecimal string.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ColorDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculates the difference between two <see cref="T:System.Windows.Media.Color"/>s
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns>L2-norm in RGBA space</returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.HueDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculate the difference in hue between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.Complementary(System.Windows.Media.Color)">
            <summary>
            Calculates the complementary color
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.HexToColor(System.String)">
            <summary>
            Convert a hexadecimal string to <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.UIntToColor(System.UInt32)">
            <summary>
            Convert an unsigned int (32bit) to <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to unsigned int
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ColorToHsvBytes(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (byte)
            </summary>
            <param name="color"></param>
            <returns>Array of [Hue,Saturation,Value] in the range [0,255]</returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.ColorToHsv(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (double)
            </summary>
            <param name="color"></param>
            <returns>Array of [Hue,Saturation,Value] in the range [0,1]</returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.HsvToColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts from HSV to a RGB <see cref="T:System.Windows.Media.Color"/>
            </summary>
            <param name="hue"></param>
            <param name="saturation"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.ColorHelper.HsvToColor(System.Double,System.Double,System.Double)">
            <summary>
            Convert from HSV to <see cref="T:System.Windows.Media.Color"/>
            http://en.wikipedia.org/wiki/HSL_color_space
            </summary>
            <param name="hue">Hue [0,1]</param>
            <param name="sat">Saturation [0,1]</param>
            <param name="val">Value [0,1]</param>
            <returns></returns>
        </member>
        <member name="T:PropertyEditorLibrary.ToDoubleConverter">
            <summary>
            Convert any object to double (if possible)
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.NullToVisibilityConverter">
            <summary>
            Null to Visibility converter
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.FilePicker">
            <summary>
            FilePicker control
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.EnumValuesConverter">
            <summary>
            Usage 'Converter={local:EnumValuesConverter}'
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.RadioButtonsAttribute">
            <summary>
            The [Radiobutton] attribute defines if an enum property should use a 
            radiobutton list as its editor. The default is a combobox.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.FilePathAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:PropertyEditorLibrary.AttributeHelper.GetFirstAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return the first attribute of a given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:PropertyEditorLibrary.AttributeHelper.ContainsAttributeOfType(System.ComponentModel.AttributeCollection,System.Type)">
            <summary>
            Check if an attribute collection contains an attribute of the given type
            </summary>
            <param name="attributes"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="T:PropertyEditorLibrary.IPropertyStateProvider">
            <summary>
            Return Enabled, Visible, Error and Warning states for a given component and property.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.ILocalizationService">
            <summary>
            Localize tab/category/property names and tooltips.
            Used in PropertyEditor.LocalizationService
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.HeightAttribute">
            <summary>
            The Height attribute is used to control the height of TextBoxes.
            Example usage: 
              [Height(100)] 
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.FormattingTextBox">
            <summary>
            A TextBox with a bindable StringFormat property.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.PropertyTemplateSelector">
            <summary>
            The PropertyTemplateSelector is used to select a DataTemplate given an PropertyViewModel instance.
            The DataTemplates should be defined in the BasicEditors.xaml/ExtendedEditors.xaml
            or in the Editors collection of the PropertyEditor.
            This Selector can also be overriden if you want to provide custom selecting implementation.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.WidePropertyAttribute">
            <summary>
            The [WideProperty] attribute is used for wide properties.
            Properties marked with [WideProperty] will have the label above the editor.
            Properties marked with [WideProperty(false)] will have no label.
            The editor will use the full width of the available area.
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.TypeEditor">
            <summary>
            Define a datatemplate for a given type
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.TextBoxEx">
            <summary>
            TextBox that updates the binding when Enter is pressed. Also moves focus to the next control.
            Todo: replace by behaviour or attached dependency property?
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.FormatStringAttribute">
            <summary>
            The FormatString attribute is used to provide a format string for numeric properties.
            Example usage:
              [FormatString("0.00")]
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.SortOrderAttribute">
            <summary>
            The SortOrder attribute is used to sort the tabs, categories and properties.
            Example usage: 
              [SortOrder(100)]
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.CategoryTemplateSelector">
            <summary>
            The CategoryTemplateSelector is used to select a DataTemplate for the categories
            </summary>
        </member>
        <member name="T:PropertyEditorLibrary.OptionalAttribute">
            <summary>
            The Optional attribute is used for optional properties.
            Properties marked with [Optional] will have a checkbox as the label.
            The checkbox will enable/disable the property value editor.
            Example usage:
              [Optional]                    // requires a nullable property type
              [Optional("HasSomething")]    // relates to other property HasSomething
            </summary>
        </member>
    </members>
</doc>
